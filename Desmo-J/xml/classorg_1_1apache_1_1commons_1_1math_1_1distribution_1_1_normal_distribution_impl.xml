<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl" kind="class" prot="public">
    <compoundname>org::apache::commons::math::distribution::NormalDistributionImpl</compoundname>
    <basecompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.AbstractContinuousDistribution</basecompoundref>
    <basecompoundref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.NormalDistribution</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Serializable</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a649e2df232a4ad98efd29c0ed7e5b57e" prot="private" static="yes" mutable="no">
        <type>final long</type>
        <definition>final long org.apache.commons.math.distribution.NormalDistributionImpl.serialVersionUID</definition>
        <argsstring></argsstring>
        <name>serialVersionUID</name>
        <initializer>= 8589540077390120676L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serializable version identifier </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="36" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1aa1b74593b60d8c121211b4c51d8dee50" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.NormalDistributionImpl.mean</definition>
        <argsstring></argsstring>
        <name>mean</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The mean of this distribution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="39" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1af6cd25f4160fd4f46390b265c81c9e5c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.NormalDistributionImpl.standardDeviation</definition>
        <argsstring></argsstring>
        <name>standardDeviation</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The standard deviation of this distribution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="42" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a26634ba6d21a23c5cb8d07a37ba57358" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl</definition>
        <argsstring>(double mean, double sd)</argsstring>
        <name>NormalDistributionImpl</name>
        <param>
          <type>double</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a normal distribution using the given mean and standard deviation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>mean for this distribution </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>standard deviation for this distribution </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="49" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="49" bodyend="53"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1ac5afa5722c08209a53d87c23fdf0b9b6" compoundref="_normal_distribution_impl_8java" startline="75" endline="77">org.apache.commons.math.distribution.NormalDistributionImpl.setMean</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1adeb7aa9e2e8915c1af8da85329827979" compoundref="_normal_distribution_impl_8java" startline="92" endline="98">org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1ac4c7edbc22045308664f4e8bfb856b3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.commons.math.distribution.NormalDistributionImpl.NormalDistributionImpl</definition>
        <argsstring>()</argsstring>
        <name>NormalDistributionImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates normal distribution with the mean equal to zero and standard deviation equal to one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="59" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a970d94b479d8580da4738bfe4327fc61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.NormalDistributionImpl.getMean</definition>
        <argsstring>()</argsstring>
        <name>getMean</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_1a5441f8a16cdb0366c9b69974e21be8d4">getMean</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the mean. <simplesect kind="return"><para>mean for this distribution </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="67" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1ac5afa5722c08209a53d87c23fdf0b9b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.commons.math.distribution.NormalDistributionImpl.setMean</definition>
        <argsstring>(double mean)</argsstring>
        <name>setMean</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_1a883da83950921598997f0baff3169c9a">setMean</reimplements>
        <param>
          <type>double</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the mean. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>for this distribution </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="75" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a44594b2d968da07c0763b3a6cf2f9cba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation</definition>
        <argsstring>()</argsstring>
        <name>getStandardDeviation</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_1a158537b8c88729fa16a07a4745e7fe39">getStandardDeviation</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the standard deviation. <simplesect kind="return"><para>standard deviation for this distribution </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="83" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1adeb7aa9e2e8915c1af8da85329827979" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.commons.math.distribution.NormalDistributionImpl.setStandardDeviation</definition>
        <argsstring>(double sd)</argsstring>
        <name>setStandardDeviation</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_1a558da30ca669166b85522d7c3e86a972">setStandardDeviation</reimplements>
        <param>
          <type>double</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the standard deviation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>standard deviation for this distribution </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>sd</computeroutput> is not positive. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="92" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a191816a36987990916fbef72cd14dd86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.NormalDistributionImpl.cumulativeProbability</definition>
        <argsstring>(double x)</argsstring>
        <name>cumulativeProbability</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution_1a72faeb4e48d8607d791fcb3fa9afb0e3">cumulativeProbability</reimplements>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For this disbution, X, this method returns P(X &lt; <computeroutput>x</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the value at which the CDF is evaluated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CDF evaluted at <computeroutput>x</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the algorithm fails to converge; unless x is more than 20 standard deviations from the mean, in which case the convergence exception is caught and 0 or 1 is returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="108" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a3bd8bdd938a8d9a25bbcf275db5d16e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.NormalDistributionImpl.inverseCumulativeProbability</definition>
        <argsstring>(final double p)</argsstring>
        <name>inverseCumulativeProbability</name>
        <param>
          <type>final double</type>
          <declname>p</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For this distribution, X, this method returns the critical point x, such that P(X &lt; x) = <computeroutput>p</computeroutput>. </para><para>Returns <computeroutput>Double.NEGATIVE_INFINITY</computeroutput> for p=0 and <computeroutput>Double.POSITIVE_INFINITY</computeroutput> for p=1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>x, such that P(X &lt; x) = <computeroutput>p</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the inverse cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>p</computeroutput> is not a valid probability. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="137" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="137" bodyend="146"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a6856b76c38e1be45ccfe34f375de8143" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.NormalDistributionImpl.getDomainLowerBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainLowerBound</name>
        <reimplements refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a7c65e91d5a1eb53a5bd309b58e36e966">getDomainLowerBound</reimplements>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value lower bound, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value lower bound, i.e. P(X &lt; <emphasis>lower bound</emphasis>) &lt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="157" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="157" bodyend="167"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a970d94b479d8580da4738bfe4327fc61" compoundref="_normal_distribution_impl_8java" startline="67" endline="69">org.apache.commons.math.distribution.NormalDistributionImpl.getMean</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a315049dcf42c84d1de37a6fd34fd34a0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.NormalDistributionImpl.getDomainUpperBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainUpperBound</name>
        <reimplements refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1aeb69c1dd57e233b023edc88155108191">getDomainUpperBound</reimplements>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value upper bound, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value upper bound, i.e. P(X &lt; <emphasis>upper bound</emphasis>) &gt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="178" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="178" bodyend="188"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a970d94b479d8580da4738bfe4327fc61" compoundref="_normal_distribution_impl_8java" startline="67" endline="69">org.apache.commons.math.distribution.NormalDistributionImpl.getMean</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a56a45a425188b7c4f628e64d528e45f5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.NormalDistributionImpl.getInitialDomain</definition>
        <argsstring>(double p)</argsstring>
        <name>getInitialDomain</name>
        <reimplements refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a24d1238e49baef8a236e66c77ce0db3e">getInitialDomain</reimplements>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the initial domain value, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>initial domain value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="198" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="198" bodyend="210"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a970d94b479d8580da4738bfe4327fc61" compoundref="_normal_distribution_impl_8java" startline="67" endline="69">org.apache.commons.math.distribution.NormalDistributionImpl.getMean</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a44594b2d968da07c0763b3a6cf2f9cba" compoundref="_normal_distribution_impl_8java" startline="83" endline="85">org.apache.commons.math.distribution.NormalDistributionImpl.getStandardDeviation</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Default implementation of <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution" kindref="compound">org.apache.commons.math.distribution.NormalDistribution</ref>.</para><para><simplesect kind="version"><para></para></simplesect>
<simplesect kind="rcs"><title>Revision:</title><para>617953 </para></simplesect>
<simplesect kind="rcs"><title>Date:</title><para>2008-02-02 22:54:00 -0700 (Sat, 02 Feb 2008) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="9290">
        <label>org.apache.commons.math.distribution.ContinuousDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution"/>
        <childnode refid="9288" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9289">
        <label>Serializable</label>
      </node>
      <node id="9291">
        <label>org.apache.commons.math.distribution.NormalDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution"/>
        <childnode refid="9290" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9286">
        <label>org.apache.commons.math.distribution.AbstractContinuousDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution"/>
        <childnode refid="9287" relation="public-inheritance">
        </childnode>
        <childnode refid="9290" relation="public-inheritance">
        </childnode>
        <childnode refid="9289" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9287">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="9288" relation="public-inheritance">
        </childnode>
        <childnode refid="9289" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9288">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
      <node id="9285">
        <label>org.apache.commons.math.distribution.NormalDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl"/>
        <childnode refid="9286" relation="public-inheritance">
        </childnode>
        <childnode refid="9291" relation="public-inheritance">
        </childnode>
        <childnode refid="9289" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9297">
        <label>org.apache.commons.math.distribution.ContinuousDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution"/>
        <childnode refid="9295" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9296">
        <label>Serializable</label>
      </node>
      <node id="9298">
        <label>org.apache.commons.math.distribution.NormalDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution"/>
        <childnode refid="9297" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9293">
        <label>org.apache.commons.math.distribution.AbstractContinuousDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution"/>
        <childnode refid="9294" relation="public-inheritance">
        </childnode>
        <childnode refid="9297" relation="public-inheritance">
        </childnode>
        <childnode refid="9296" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9294">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="9295" relation="public-inheritance">
        </childnode>
        <childnode refid="9296" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9295">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
      <node id="9292">
        <label>org.apache.commons.math.distribution.NormalDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl"/>
        <childnode refid="9293" relation="public-inheritance">
        </childnode>
        <childnode refid="9298" relation="public-inheritance">
        </childnode>
        <childnode refid="9296" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" line="33" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/NormalDistributionImpl.java" bodystart="32" bodyend="211"/>
    <listofallmembers>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1ad2268d4983e173bb3628fba19d93b2e4" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>AbstractContinuousDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a69b03d7cd00b00c946eea69dfa8da7ba" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>AbstractDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a191816a36987990916fbef72cd14dd86" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a240f9e95109838d7a1dfb5af57c2ebd2" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::AbstractContinuousDistribution."><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a6856b76c38e1be45ccfe34f375de8143" prot="protected" virt="virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>getDomainLowerBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a315049dcf42c84d1de37a6fd34fd34a0" prot="protected" virt="virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>getDomainUpperBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a56a45a425188b7c4f628e64d528e45f5" prot="protected" virt="virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>getInitialDomain</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a970d94b479d8580da4738bfe4327fc61" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>getMean</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a44594b2d968da07c0763b3a6cf2f9cba" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>getStandardDeviation</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a3bd8bdd938a8d9a25bbcf275db5d16e4" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>inverseCumulativeProbability</name></member>
      <member refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::ContinuousDistribution."><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>inverseCumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1aa1b74593b60d8c121211b4c51d8dee50" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>mean</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a26634ba6d21a23c5cb8d07a37ba57358" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>NormalDistributionImpl</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1ac4c7edbc22045308664f4e8bfb856b3e" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>NormalDistributionImpl</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a649e2df232a4ad98efd29c0ed7e5b57e" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>serialVersionUID</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1ac5afa5722c08209a53d87c23fdf0b9b6" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>setMean</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1adeb7aa9e2e8915c1af8da85329827979" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>setStandardDeviation</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1af6cd25f4160fd4f46390b265c81c9e5c" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::NormalDistributionImpl</scope><name>standardDeviation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
