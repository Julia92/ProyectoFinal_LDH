<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution" kind="class" prot="public" abstract="yes">
    <compoundname>org::apache::commons::math::distribution::AbstractIntegerDistribution</compoundname>
    <basecompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.AbstractDistribution</basecompoundref>
    <basecompoundref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_integer_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.IntegerDistribution</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Serializable</basecompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_binomial_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.BinomialDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_hypergeometric_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.HypergeometricDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_pascal_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.PascalDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_poisson_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.PoissonDistributionImpl</derivedcompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a0a923a03323dcc3e0a66c277157b0951" prot="private" static="yes" mutable="no">
        <type>final long</type>
        <definition>final long org.apache.commons.math.distribution.AbstractIntegerDistribution.serialVersionUID</definition>
        <argsstring></argsstring>
        <name>serialVersionUID</name>
        <initializer>= -1146319659338487221L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serializable version identifier </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="35" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a5319f9938a77a957c740bd552a2ce2ba" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.commons.math.distribution.AbstractIntegerDistribution.AbstractIntegerDistribution</definition>
        <argsstring>()</argsstring>
        <name>AbstractIntegerDistribution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="40" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a9e292c6a847a50d2bff94d8b6f4571a3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract int</type>
        <definition>abstract int org.apache.commons.math.distribution.AbstractIntegerDistribution.getDomainLowerBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainLowerBound</name>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_pascal_distribution_impl_1a29a18919e9984dcbf0d6f8bc5dbae35d">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_binomial_distribution_impl_1a4a71e54b145b7163af4df88a717cbab7">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_hypergeometric_distribution_impl_1ad1890a8eb14776970d7564318170590a">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_poisson_distribution_impl_1a3ca89329663129976a0e663704510ae4">getDomainLowerBound</reimplementedby>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value lower bound, based on <computeroutput>p</computeroutput>, used to bracket a PDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_integer_distribution_1a1f81723addd210b0a5b69aa29611938e" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value lower bound, i.e. P(X &lt; <emphasis>lower bound</emphasis>) &lt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a916035a8a060fc4b055f7fadafa3a383" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract int</type>
        <definition>abstract int org.apache.commons.math.distribution.AbstractIntegerDistribution.getDomainUpperBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainUpperBound</name>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_pascal_distribution_impl_1adf5991b5bad8ef4306683e2465c1450a">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_binomial_distribution_impl_1aa4b41347f440f5522cb34b4f0c1f7cfe">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_hypergeometric_distribution_impl_1aafcfd653990d9b4b279ef3c875c459ab">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_poisson_distribution_impl_1a46c85859c5c59028eb081c8a3636e3ad">getDomainUpperBound</reimplementedby>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value upper bound, based on <computeroutput>p</computeroutput>, used to bracket a PDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_integer_distribution_1a1f81723addd210b0a5b69aa29611938e" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value upper bound, i.e. P(X &lt; <emphasis>upper bound</emphasis>) &gt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="220" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1ab1cf216fde5141e5cc5a448bf387a8a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability</definition>
        <argsstring>(double x)</argsstring>
        <name>cumulativeProbability</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution_1a72faeb4e48d8607d791fcb3fa9afb0e3">cumulativeProbability</reimplements>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a random variable X whose values are distributed according to this distribution, this method returns P(X <le/> x). In other words, this method represents the (cumulative) distribution function, or CDF, for this distribution. </para><para>If <computeroutput>x</computeroutput> does not represent an integer value, the CDF is evaluated at the greatest integer less than x.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the value at which the distribution function is evaluated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cumulative probability that a random variable with this distribution takes a value less than or equal to <computeroutput>x</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="59" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a5a311468d6c2ba4d51710302f716afef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability</definition>
        <argsstring>(double x0, double x1)</argsstring>
        <name>cumulativeProbability</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution_1ad43685ba7ac5c6a72b4fd06a226347a9">cumulativeProbability</reimplements>
        <param>
          <type>double</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a random variable X whose values are distributed according to this distribution, this method returns P(x0 <le/> X <le/> x1).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>the (inclusive) lower bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the (inclusive) upper bound </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the probability that a random variable with this distribution will take a value between <computeroutput>x0</computeroutput> and <computeroutput>x1</computeroutput>, including the endpoints. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>x0 &gt; x1</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="76" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" bodystart="76" bodyend="89"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1ab1cf216fde5141e5cc5a448bf387a8a1" compoundref="_abstract_integer_distribution_8java" startline="59" endline="61">org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1af64ac51473a3452bf6c2d4cc95b470c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract double</type>
        <definition>abstract double org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability</definition>
        <argsstring>(int x)</argsstring>
        <name>cumulativeProbability</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_integer_distribution_1ac11cf6252d18f1bd38d5284dfb519db9">cumulativeProbability</reimplements>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_hypergeometric_distribution_impl_1a996664cd1099336fc6b7e30b838a3448">cumulativeProbability</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_poisson_distribution_impl_1a892f522be5fe3e199d1ae29571a1f99c">cumulativeProbability</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_pascal_distribution_impl_1a810842075bcbce5ae8a836c6df85fbb7">cumulativeProbability</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_binomial_distribution_impl_1a2db67eadba2300e50e03f531a0eccd27">cumulativeProbability</reimplementedby>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a random variable X whose values are distributed according to this distribution, this method returns P(X <le/> x). In other words, this method represents the probability distribution function, or PDF, for this distribution.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the value at which the PDF is evaluated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PDF for this distribution. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a3535594dbf1de8fe562aa1a55ac6ae83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.AbstractIntegerDistribution.probability</definition>
        <argsstring>(double x)</argsstring>
        <name>probability</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_discrete_distribution_1abb6337c9c8ae3b31728f20ad728590fe">probability</reimplements>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a random variable X whose values are distributed according to this distribution, this method returns P(X = x). In other words, this method represents the probability mass function, or PMF, for the distribution. </para><para>If <computeroutput>x</computeroutput> does not represent an integer value, 0 is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the value at which the probability density function is evaluated </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the probability density function at x </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="114" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a8bae6edc0a95af6afaa6a09f6c0944ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability</definition>
        <argsstring>(int x0, int x1)</argsstring>
        <name>cumulativeProbability</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_integer_distribution_1a1bca6cae3ea19c6a95a9565e261ee497">cumulativeProbability</reimplements>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a random variable X whose values are distributed according to this distribution, this method returns P(x0 <le/> X <le/> x1).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>the inclusive, lower bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the inclusive, upper bound </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the cumulative probability. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if x0 &gt; x1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="134" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" bodystart="134" bodyend="140"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1ab1cf216fde5141e5cc5a448bf387a8a1" compoundref="_abstract_integer_distribution_8java" startline="59" endline="61">org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1afc3955226e809146a1ff1e7f5d3945e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int org.apache.commons.math.distribution.AbstractIntegerDistribution.inverseCumulativeProbability</definition>
        <argsstring>(final double p)</argsstring>
        <name>inverseCumulativeProbability</name>
        <param>
          <type>final double</type>
          <declname>p</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a random variable X whose values are distributed according to this distribution, this method returns the largest x, such that P(X <le/> x) <le/> <computeroutput>p</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the largest x such that P(X <le/> x) &lt;= p </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the inverse cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if p &lt; 0 or p &gt; 1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="153" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" bodystart="153" bodyend="198"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a9e292c6a847a50d2bff94d8b6f4571a3">org.apache.commons.math.distribution.AbstractIntegerDistribution.getDomainLowerBound</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a916035a8a060fc4b055f7fadafa3a383">org.apache.commons.math.distribution.AbstractIntegerDistribution.getDomainUpperBound</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1ab1cf216fde5141e5cc5a448bf387a8a1" compoundref="_abstract_integer_distribution_8java" startline="59" endline="61">org.apache.commons.math.distribution.AbstractIntegerDistribution.cumulativeProbability</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for integer-valued discrete distributions. Default implementations are provided for some of the methods that do not vary from distribution to distribution.</para><para><simplesect kind="version"><para></para></simplesect>
<simplesect kind="rcs"><title>Revision:</title><para>620368 </para></simplesect>
<simplesect kind="rcs"><title>Date:</title><para>2008-02-10 18:04:48 -0700 (Sun, 10 Feb 2008) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="5798">
        <label>org.apache.commons.math.distribution.AbstractIntegerDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution"/>
        <childnode refid="5799" relation="public-inheritance">
        </childnode>
        <childnode refid="5802" relation="public-inheritance">
        </childnode>
        <childnode refid="5801" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5807">
        <label>org.apache.commons.math.distribution.PoissonDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_poisson_distribution_impl"/>
        <childnode refid="5798" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5802">
        <label>org.apache.commons.math.distribution.IntegerDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_integer_distribution"/>
        <childnode refid="5803" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5801">
        <label>Serializable</label>
      </node>
      <node id="5806">
        <label>org.apache.commons.math.distribution.PascalDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_pascal_distribution_impl"/>
        <childnode refid="5798" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5799">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="5800" relation="public-inheritance">
        </childnode>
        <childnode refid="5801" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5800">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
      <node id="5804">
        <label>org.apache.commons.math.distribution.BinomialDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_binomial_distribution_impl"/>
        <childnode refid="5798" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5805">
        <label>org.apache.commons.math.distribution.HypergeometricDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_hypergeometric_distribution_impl"/>
        <childnode refid="5798" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5803">
        <label>org.apache.commons.math.distribution.DiscreteDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_discrete_distribution"/>
        <childnode refid="5800" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5808">
        <label>org.apache.commons.math.distribution.AbstractIntegerDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution"/>
        <childnode refid="5809" relation="public-inheritance">
        </childnode>
        <childnode refid="5812" relation="public-inheritance">
        </childnode>
        <childnode refid="5811" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5812">
        <label>org.apache.commons.math.distribution.IntegerDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_integer_distribution"/>
        <childnode refid="5813" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5811">
        <label>Serializable</label>
      </node>
      <node id="5809">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="5810" relation="public-inheritance">
        </childnode>
        <childnode refid="5811" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5810">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
      <node id="5813">
        <label>org.apache.commons.math.distribution.DiscreteDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_discrete_distribution"/>
        <childnode refid="5810" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" line="32" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractIntegerDistribution.java" bodystart="31" bodyend="221"/>
    <listofallmembers>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a69b03d7cd00b00c946eea69dfa8da7ba" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>AbstractDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a5319f9938a77a957c740bd552a2ce2ba" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>AbstractIntegerDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1ab1cf216fde5141e5cc5a448bf387a8a1" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a5a311468d6c2ba4d51710302f716afef" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1af64ac51473a3452bf6c2d4cc95b470c6" prot="public" virt="pure-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a8bae6edc0a95af6afaa6a09f6c0944ce" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a9e292c6a847a50d2bff94d8b6f4571a3" prot="protected" virt="pure-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>getDomainLowerBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a916035a8a060fc4b055f7fadafa3a383" prot="protected" virt="pure-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>getDomainUpperBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1afc3955226e809146a1ff1e7f5d3945e5" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>inverseCumulativeProbability</name></member>
      <member refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_integer_distribution_1a1f81723addd210b0a5b69aa29611938e" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::IntegerDistribution."><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>inverseCumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a3535594dbf1de8fe562aa1a55ac6ae83" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>probability</name></member>
      <member refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_integer_distribution_1ae20d4195b3f5ab562d332070c82c4cdd" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::IntegerDistribution."><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>probability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_integer_distribution_1a0a923a03323dcc3e0a66c277157b0951" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractIntegerDistribution</scope><name>serialVersionUID</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
