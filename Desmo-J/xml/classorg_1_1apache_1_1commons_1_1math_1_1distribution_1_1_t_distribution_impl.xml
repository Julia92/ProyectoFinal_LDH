<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl" kind="class" prot="public">
    <compoundname>org::apache::commons::math::distribution::TDistributionImpl</compoundname>
    <basecompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.AbstractContinuousDistribution</basecompoundref>
    <basecompoundref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.TDistribution</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Serializable</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a01fdbf8ff8a4848bfa1cdf01b245d913" prot="private" static="yes" mutable="no">
        <type>final long</type>
        <definition>final long org.apache.commons.math.distribution.TDistributionImpl.serialVersionUID</definition>
        <argsstring></argsstring>
        <name>serialVersionUID</name>
        <initializer>= -5852615386664158222L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serializable version identifier </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="35" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a0a1138291459be5c178b3b7b73194dac" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.TDistributionImpl.degreesOfFreedom</definition>
        <argsstring></argsstring>
        <name>degreesOfFreedom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The degrees of freedom </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="38" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a049d344dab4d0a828d25952331d17350" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.commons.math.distribution.TDistributionImpl.TDistributionImpl</definition>
        <argsstring>(double degreesOfFreedom)</argsstring>
        <name>TDistributionImpl</name>
        <param>
          <type>double</type>
          <declname>degreesOfFreedom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a t distribution using the given degrees of freedom. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degreesOfFreedom</parametername>
</parameternamelist>
<parameterdescription>
<para>the degrees of freedom. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="44" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="44" bodyend="47"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1ac6dab7bf40c28faaeadcbea217b79efb" compoundref="_t_distribution_impl_8java" startline="53" endline="58">org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1ac6dab7bf40c28faaeadcbea217b79efb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.commons.math.distribution.TDistributionImpl.setDegreesOfFreedom</definition>
        <argsstring>(double degreesOfFreedom)</argsstring>
        <name>setDegreesOfFreedom</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_1ac177cb53ac5c25e82f18dc8654df7b8d">setDegreesOfFreedom</reimplements>
        <param>
          <type>double</type>
          <declname>degreesOfFreedom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the degrees of freedom. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degreesOfFreedom</parametername>
</parameternamelist>
<parameterdescription>
<para>the new degrees of freedom. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="53" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1aafa2323acb8b8f9d0a2913a93bd4381a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.TDistributionImpl.getDegreesOfFreedom</definition>
        <argsstring>()</argsstring>
        <name>getDegreesOfFreedom</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_1a0a542507b955b8b0b1cde705dbc6facf">getDegreesOfFreedom</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the degrees of freedom. <simplesect kind="return"><para>the degrees of freedom. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="64" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a08de413e8723451a65a1cb59b2eaff19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.TDistributionImpl.cumulativeProbability</definition>
        <argsstring>(double x)</argsstring>
        <name>cumulativeProbability</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution_1a72faeb4e48d8607d791fcb3fa9afb0e3">cumulativeProbability</reimplements>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For this disbution, X, this method returns P(X &lt; <computeroutput>x</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the value at which the CDF is evaluated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CDF evaluted at <computeroutput>x</computeroutput>. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="75" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="75" bodyend="93"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1aafa2323acb8b8f9d0a2913a93bd4381a" compoundref="_t_distribution_impl_8java" startline="64" endline="66">org.apache.commons.math.distribution.TDistributionImpl.getDegreesOfFreedom</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1adaebd787b72298552ea61fed6cbfed44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.TDistributionImpl.inverseCumulativeProbability</definition>
        <argsstring>(final double p)</argsstring>
        <name>inverseCumulativeProbability</name>
        <param>
          <type>final double</type>
          <declname>p</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For this distribution, X, this method returns the critical point x, such that P(X &lt; x) = <computeroutput>p</computeroutput>. </para><para>Returns <computeroutput>Double.NEGATIVE_INFINITY</computeroutput> for p=0 and <computeroutput>Double.POSITIVE_INFINITY</computeroutput> for p=1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>x, such that P(X &lt; x) = <computeroutput>p</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the inverse cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>p</computeroutput> is not a valid probability. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="109" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="109" bodyend="118"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a4c275b4559fafccad914163c190e3598" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.TDistributionImpl.getDomainLowerBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainLowerBound</name>
        <reimplements refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a7c65e91d5a1eb53a5bd309b58e36e966">getDomainLowerBound</reimplements>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value lower bound, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value lower bound, i.e. P(X &lt; <emphasis>lower bound</emphasis>) &lt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="129" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a7a3d33f5e49a8d919814d2c13e64ff93" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.TDistributionImpl.getDomainUpperBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainUpperBound</name>
        <reimplements refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1aeb69c1dd57e233b023edc88155108191">getDomainUpperBound</reimplements>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value upper bound, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value upper bound, i.e. P(X &lt; <emphasis>upper bound</emphasis>) &gt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="142" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1ae16c30909eaab90a2860dec4c0a88103" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.TDistributionImpl.getInitialDomain</definition>
        <argsstring>(double p)</argsstring>
        <name>getInitialDomain</name>
        <reimplements refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a24d1238e49baef8a236e66c77ce0db3e">getInitialDomain</reimplements>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the initial domain value, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>initial domain value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="154" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="154" bodyend="156"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Default implementation of <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution" kindref="compound">org.apache.commons.math.distribution.TDistribution</ref>.</para><para><simplesect kind="version"><para></para></simplesect>
<simplesect kind="rcs"><title>Revision:</title><para>617953 </para></simplesect>
<simplesect kind="rcs"><title>Date:</title><para>2008-02-02 22:54:00 -0700 (Sat, 02 Feb 2008) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="11372">
        <label>org.apache.commons.math.distribution.ContinuousDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution"/>
        <childnode refid="11370" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11371">
        <label>Serializable</label>
      </node>
      <node id="11368">
        <label>org.apache.commons.math.distribution.AbstractContinuousDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution"/>
        <childnode refid="11369" relation="public-inheritance">
        </childnode>
        <childnode refid="11372" relation="public-inheritance">
        </childnode>
        <childnode refid="11371" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11367">
        <label>org.apache.commons.math.distribution.TDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl"/>
        <childnode refid="11368" relation="public-inheritance">
        </childnode>
        <childnode refid="11373" relation="public-inheritance">
        </childnode>
        <childnode refid="11371" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11369">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="11370" relation="public-inheritance">
        </childnode>
        <childnode refid="11371" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11373">
        <label>org.apache.commons.math.distribution.TDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution"/>
        <childnode refid="11372" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11370">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11379">
        <label>org.apache.commons.math.distribution.ContinuousDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution"/>
        <childnode refid="11377" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11378">
        <label>Serializable</label>
      </node>
      <node id="11375">
        <label>org.apache.commons.math.distribution.AbstractContinuousDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution"/>
        <childnode refid="11376" relation="public-inheritance">
        </childnode>
        <childnode refid="11379" relation="public-inheritance">
        </childnode>
        <childnode refid="11378" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11374">
        <label>org.apache.commons.math.distribution.TDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl"/>
        <childnode refid="11375" relation="public-inheritance">
        </childnode>
        <childnode refid="11380" relation="public-inheritance">
        </childnode>
        <childnode refid="11378" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11376">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="11377" relation="public-inheritance">
        </childnode>
        <childnode refid="11378" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11380">
        <label>org.apache.commons.math.distribution.TDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution"/>
        <childnode refid="11379" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11377">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" line="32" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/TDistributionImpl.java" bodystart="30" bodyend="157"/>
    <listofallmembers>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1ad2268d4983e173bb3628fba19d93b2e4" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>AbstractContinuousDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a69b03d7cd00b00c946eea69dfa8da7ba" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>AbstractDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a08de413e8723451a65a1cb59b2eaff19" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a240f9e95109838d7a1dfb5af57c2ebd2" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::AbstractContinuousDistribution."><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a0a1138291459be5c178b3b7b73194dac" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>degreesOfFreedom</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1aafa2323acb8b8f9d0a2913a93bd4381a" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>getDegreesOfFreedom</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a4c275b4559fafccad914163c190e3598" prot="protected" virt="virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>getDomainLowerBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a7a3d33f5e49a8d919814d2c13e64ff93" prot="protected" virt="virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>getDomainUpperBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1ae16c30909eaab90a2860dec4c0a88103" prot="protected" virt="virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>getInitialDomain</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1adaebd787b72298552ea61fed6cbfed44" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>inverseCumulativeProbability</name></member>
      <member refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::ContinuousDistribution."><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>inverseCumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a01fdbf8ff8a4848bfa1cdf01b245d913" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>serialVersionUID</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1ac6dab7bf40c28faaeadcbea217b79efb" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>setDegreesOfFreedom</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a049d344dab4d0a828d25952331d17350" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::TDistributionImpl</scope><name>TDistributionImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
