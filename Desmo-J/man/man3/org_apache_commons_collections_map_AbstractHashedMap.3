.TH "org.apache.commons.collections.map.AbstractHashedMap" 3 "Wed Dec 4 2013" "Version 1.0" "Desmo-J" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.apache.commons.collections.map.AbstractHashedMap \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits AbstractMap, and \fBorg\&.apache\&.commons\&.collections\&.IterableMap\fP\&.
.PP
Inherited by \fBorg\&.apache\&.commons\&.collections\&.map\&.AbstractReferenceMap\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBEntrySet\fP"
.br
.ti -1c
.RI "class \fBEntrySetIterator\fP"
.br
.ti -1c
.RI "class \fBHashEntry\fP"
.br
.ti -1c
.RI "class \fBHashIterator\fP"
.br
.ti -1c
.RI "class \fBHashMapIterator\fP"
.br
.ti -1c
.RI "class \fBKeySet\fP"
.br
.ti -1c
.RI "class \fBKeySetIterator\fP"
.br
.ti -1c
.RI "class \fBValues\fP"
.br
.ti -1c
.RI "class \fBValuesIterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "Object \fBget\fP (Object key)"
.br
.ti -1c
.RI "int \fBsize\fP ()"
.br
.ti -1c
.RI "boolean \fBisEmpty\fP ()"
.br
.ti -1c
.RI "boolean \fBcontainsKey\fP (Object key)"
.br
.ti -1c
.RI "boolean \fBcontainsValue\fP (Object value)"
.br
.ti -1c
.RI "Object \fBput\fP (Object key, Object value)"
.br
.ti -1c
.RI "void \fBputAll\fP (Map map)"
.br
.ti -1c
.RI "Object \fBremove\fP (Object key)"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "\fBMapIterator\fP \fBmapIterator\fP ()"
.br
.ti -1c
.RI "Set \fBentrySet\fP ()"
.br
.ti -1c
.RI "Set \fBkeySet\fP ()"
.br
.ti -1c
.RI "Collection \fBvalues\fP ()"
.br
.ti -1c
.RI "boolean \fBequals\fP (Object obj)"
.br
.ti -1c
.RI "int \fBhashCode\fP ()"
.br
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBAbstractHashedMap\fP ()"
.br
.ti -1c
.RI "\fBAbstractHashedMap\fP (int initialCapacity, float \fBloadFactor\fP, int \fBthreshold\fP)"
.br
.ti -1c
.RI "\fBAbstractHashedMap\fP (int initialCapacity)"
.br
.ti -1c
.RI "\fBAbstractHashedMap\fP (int initialCapacity, float \fBloadFactor\fP)"
.br
.ti -1c
.RI "\fBAbstractHashedMap\fP (Map map)"
.br
.ti -1c
.RI "void \fBinit\fP ()"
.br
.ti -1c
.RI "Object \fBconvertKey\fP (Object key)"
.br
.ti -1c
.RI "int \fBhash\fP (Object key)"
.br
.ti -1c
.RI "boolean \fBisEqualKey\fP (Object key1, Object key2)"
.br
.ti -1c
.RI "boolean \fBisEqualValue\fP (Object value1, Object value2)"
.br
.ti -1c
.RI "int \fBhashIndex\fP (int \fBhashCode\fP, int dataSize)"
.br
.ti -1c
.RI "HashEntry \fBgetEntry\fP (Object key)"
.br
.ti -1c
.RI "void \fBupdateEntry\fP (HashEntry entry, Object newValue)"
.br
.ti -1c
.RI "void \fBreuseEntry\fP (HashEntry entry, int \fBhashIndex\fP, int \fBhashCode\fP, Object key, Object value)"
.br
.ti -1c
.RI "void \fBaddMapping\fP (int \fBhashIndex\fP, int \fBhashCode\fP, Object key, Object value)"
.br
.ti -1c
.RI "HashEntry \fBcreateEntry\fP (HashEntry next, int \fBhashCode\fP, Object key, Object value)"
.br
.ti -1c
.RI "void \fBaddEntry\fP (HashEntry entry, int \fBhashIndex\fP)"
.br
.ti -1c
.RI "void \fBremoveMapping\fP (HashEntry entry, int \fBhashIndex\fP, HashEntry previous)"
.br
.ti -1c
.RI "void \fBremoveEntry\fP (HashEntry entry, int \fBhashIndex\fP, HashEntry previous)"
.br
.ti -1c
.RI "void \fBdestroyEntry\fP (HashEntry entry)"
.br
.ti -1c
.RI "void \fBcheckCapacity\fP ()"
.br
.ti -1c
.RI "void \fBensureCapacity\fP (int newCapacity)"
.br
.ti -1c
.RI "int \fBcalculateNewCapacity\fP (int proposedCapacity)"
.br
.ti -1c
.RI "int \fBcalculateThreshold\fP (int newCapacity, float factor)"
.br
.ti -1c
.RI "HashEntry \fBentryNext\fP (HashEntry entry)"
.br
.ti -1c
.RI "int \fBentryHashCode\fP (HashEntry entry)"
.br
.ti -1c
.RI "Object \fBentryKey\fP (HashEntry entry)"
.br
.ti -1c
.RI "Object \fBentryValue\fP (HashEntry entry)"
.br
.ti -1c
.RI "Iterator \fBcreateEntrySetIterator\fP ()"
.br
.ti -1c
.RI "Iterator \fBcreateKeySetIterator\fP ()"
.br
.ti -1c
.RI "Iterator \fBcreateValuesIterator\fP ()"
.br
.ti -1c
.RI "void \fBdoWriteObject\fP (ObjectOutputStream out)  throws IOException "
.br
.ti -1c
.RI "void \fBdoReadObject\fP (ObjectInputStream in)  throws IOException, ClassNotFoundException "
.br
.ti -1c
.RI "Object \fBclone\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "transient float \fBloadFactor\fP"
.br
.ti -1c
.RI "transient int \fBsize\fP"
.br
.ti -1c
.RI "transient HashEntry[] \fBdata\fP"
.br
.ti -1c
.RI "transient int \fBthreshold\fP"
.br
.ti -1c
.RI "transient int \fBmodCount\fP"
.br
.ti -1c
.RI "transient EntrySet \fBentrySet\fP"
.br
.ti -1c
.RI "transient KeySet \fBkeySet\fP"
.br
.ti -1c
.RI "transient Values \fBvalues\fP"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static final String \fBNO_NEXT_ENTRY\fP = 'No next() entry in the iteration'"
.br
.ti -1c
.RI "static final String \fBNO_PREVIOUS_ENTRY\fP = 'No previous() entry in the iteration'"
.br
.ti -1c
.RI "static final String \fBREMOVE_INVALID\fP = 'remove() can only be called once after next()'"
.br
.ti -1c
.RI "static final String \fBGETKEY_INVALID\fP = 'getKey() can only be called after next() and before \fBremove\fP()'"
.br
.ti -1c
.RI "static final String \fBGETVALUE_INVALID\fP = 'getValue() can only be called after next() and before \fBremove\fP()'"
.br
.ti -1c
.RI "static final String \fBSETVALUE_INVALID\fP = 'setValue() can only be called after next() and before \fBremove\fP()'"
.br
.ti -1c
.RI "static final int \fBDEFAULT_CAPACITY\fP = 16"
.br
.ti -1c
.RI "static final int \fBDEFAULT_THRESHOLD\fP = 12"
.br
.ti -1c
.RI "static final float \fBDEFAULT_LOAD_FACTOR\fP = 0\&.75f"
.br
.ti -1c
.RI "static final int \fBMAXIMUM_CAPACITY\fP = 1 << 30"
.br
.ti -1c
.RI "static final Object \fBNULL\fP = new Object()"
.br
.in -1c
.SH "Detailed Description"
.PP 
An abstract implementation of a hash-based map which provides numerous points for subclasses to override\&. 
.PP
This class implements all the features necessary for a subclass hash-based map\&. Key-value entries are stored in instances of the \fCHashEntry\fP class, which can be overridden and replaced\&. The iterators can similarly be replaced, without the need to replace the KeySet, EntrySet and Values view classes\&. 
.PP
Overridable methods are provided to change the default hashing behaviour, and to change how entries are added to and removed from the map\&. Hopefully, all you need for unusual subclasses is here\&. 
.PP
NOTE: From Commons Collections 3\&.1 this class extends AbstractMap\&. This is to provide backwards compatibility for \fBReferenceMap\fP between v3\&.0 and v3\&.1\&. This extends clause will be removed in v4\&.0\&.
.PP
\fBSince:\fP
.RS 4
Commons Collections 3\&.0 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision:\fP
.RS 4
646777 
.RE
.PP
\fBDate:\fP
.RS 4
2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) 
.RE
.PP
.PP
\fBAuthor:\fP
.RS 4
java util HashMap 
.PP
Stephen Colebourne 
.PP
Christian Siefkes 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.AbstractHashedMap ()\fC [protected]\fP"
Constructor only used in deserialization, do not use otherwise\&. 
.SS "org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.AbstractHashedMap (intinitialCapacity, floatloadFactor, intthreshold)\fC [protected]\fP"
Constructor which performs no validation on the passed in parameters\&.
.PP
\fBParameters:\fP
.RS 4
\fIinitialCapacity\fP the initial capacity, must be a power of two 
.br
\fIloadFactor\fP the load factor, must be > 0\&.0f and generally < 1\&.0f 
.br
\fIthreshold\fP the threshold, must be sensible 
.RE
.PP

.SS "org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.AbstractHashedMap (intinitialCapacity)\fC [protected]\fP"
Constructs a new, empty map with the specified initial capacity and default load factor\&.
.PP
\fBParameters:\fP
.RS 4
\fIinitialCapacity\fP the initial capacity 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIllegalArgumentException\fP if the initial capacity is less than one 
.RE
.PP

.SS "org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.AbstractHashedMap (intinitialCapacity, floatloadFactor)\fC [protected]\fP"
Constructs a new, empty map with the specified initial capacity and load factor\&.
.PP
\fBParameters:\fP
.RS 4
\fIinitialCapacity\fP the initial capacity 
.br
\fIloadFactor\fP the load factor 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIllegalArgumentException\fP if the initial capacity is less than one 
.br
\fIIllegalArgumentException\fP if the load factor is less than or equal to zero 
.RE
.PP

.SS "org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.AbstractHashedMap (Mapmap)\fC [protected]\fP"
Constructor copying elements from another map\&.
.PP
\fBParameters:\fP
.RS 4
\fImap\fP the map to copy 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINullPointerException\fP if the map is null 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.addEntry (HashEntryentry, inthashIndex)\fC [protected]\fP"
Adds an entry into this map\&. 
.PP
This implementation adds the entry to the data storage table\&. Subclasses could override to handle changes to the map\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to add 
.br
\fIhashIndex\fP the index into the data array to store at 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.addMapping (inthashIndex, inthashCode, Objectkey, Objectvalue)\fC [protected]\fP"
Adds a new key-value mapping into this map\&. 
.PP
This implementation calls \fC\fBcreateEntry()\fP\fP, \fC\fBaddEntry()\fP\fP and \fC\fBcheckCapacity()\fP\fP\&. It also handles changes to \fCmodCount\fP and \fCsize\fP\&. Subclasses could override to fully control adds to the map\&.
.PP
\fBParameters:\fP
.RS 4
\fIhashIndex\fP the index into the data array to store at 
.br
\fIhashCode\fP the hash code of the key to add 
.br
\fIkey\fP the key to add 
.br
\fIvalue\fP the value to add 
.RE
.PP

.SS "int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.calculateNewCapacity (intproposedCapacity)\fC [protected]\fP"
Calculates the new capacity of the map\&. This implementation normalizes the capacity to a power of two\&.
.PP
\fBParameters:\fP
.RS 4
\fIproposedCapacity\fP the proposed capacity 
.RE
.PP
\fBReturns:\fP
.RS 4
the normalized new capacity 
.RE
.PP

.SS "int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.calculateThreshold (intnewCapacity, floatfactor)\fC [protected]\fP"
Calculates the new threshold of the map, where it will be resized\&. This implementation uses the load factor\&.
.PP
\fBParameters:\fP
.RS 4
\fInewCapacity\fP the new capacity 
.br
\fIfactor\fP the load factor 
.RE
.PP
\fBReturns:\fP
.RS 4
the new resize threshold 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.checkCapacity ()\fC [protected]\fP"
Checks the capacity of the map and enlarges it if necessary\&. 
.PP
This implementation uses the threshold to check if the map needs enlarging 
.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.clear ()"
Clears the map, resetting the size to zero and nullifying references to avoid garbage collection issues\&. 
.SS "Object org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.clone ()\fC [protected]\fP"
Clones the map without cloning the keys or values\&. 
.PP
To implement \fC\fBclone()\fP\fP, a subclass must implement the \fCCloneable\fP interface and make this method public\&.
.PP
\fBReturns:\fP
.RS 4
a shallow clone 
.RE
.PP

.SS "boolean org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.containsKey (Objectkey)"
Checks whether the map contains the specified key\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key to search for 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the map contains the key 
.RE
.PP

.SS "boolean org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.containsValue (Objectvalue)"
Checks whether the map contains the specified value\&.
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP the value to search for 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the map contains the value 
.RE
.PP

.SS "Object org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.convertKey (Objectkey)\fC [protected]\fP"
Converts input keys to another object for storage in the map\&. This implementation masks nulls\&. Subclasses can override this to perform alternate key conversions\&. 
.PP
The reverse conversion can be changed, if required, by overriding the getKey() method in the hash entry\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key convert 
.RE
.PP
\fBReturns:\fP
.RS 4
the converted key 
.RE
.PP

.SS "HashEntry org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.createEntry (HashEntrynext, inthashCode, Objectkey, Objectvalue)\fC [protected]\fP"
Creates an entry to store the key-value data\&. 
.PP
This implementation creates a new HashEntry instance\&. Subclasses can override this to return a different storage class, or implement caching\&.
.PP
\fBParameters:\fP
.RS 4
\fInext\fP the next entry in sequence 
.br
\fIhashCode\fP the hash code to use 
.br
\fIkey\fP the key to store 
.br
\fIvalue\fP the value to store 
.RE
.PP
\fBReturns:\fP
.RS 4
the newly created entry 
.RE
.PP

.SS "Iterator org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.createEntrySetIterator ()\fC [protected]\fP"
Creates an entry set iterator\&. Subclasses can override this to return iterators with different properties\&.
.PP
\fBReturns:\fP
.RS 4
the entrySet iterator 
.RE
.PP

.SS "Iterator org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.createKeySetIterator ()\fC [protected]\fP"
Creates a key set iterator\&. Subclasses can override this to return iterators with different properties\&.
.PP
\fBReturns:\fP
.RS 4
the keySet iterator 
.RE
.PP

.SS "Iterator org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.createValuesIterator ()\fC [protected]\fP"
Creates a values iterator\&. Subclasses can override this to return iterators with different properties\&.
.PP
\fBReturns:\fP
.RS 4
the values iterator 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.destroyEntry (HashEntryentry)\fC [protected]\fP"
Kills an entry ready for the garbage collector\&. 
.PP
This implementation prepares the HashEntry for garbage collection\&. Subclasses can override this to implement caching (override clear as well)\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to destroy 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.doReadObject (ObjectInputStreamin) throws IOException, ClassNotFoundException\fC [protected]\fP"
Reads the map data from the stream\&. This method must be overridden if a subclass must be setup before \fC\fBput()\fP\fP is used\&. 
.PP
Serialization is not one of the JDK's nicest topics\&. Normal serialization will initialise the superclass before the subclass\&. Sometimes however, this isn't what you want, as in this case the \fC\fBput()\fP\fP method on read can be affected by subclass state\&. 
.PP
The solution adopted here is to deserialize the state data of this class in this protected method\&. This method must be called by the \fCreadObject()\fP of the first serializable subclass\&. 
.PP
Subclasses may override if the subclass has a specific field that must be present before \fC\fBput()\fP\fP or \fC\fBcalculateThreshold()\fP\fP will work correctly\&.
.PP
\fBParameters:\fP
.RS 4
\fIin\fP the input stream 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.doWriteObject (ObjectOutputStreamout) throws IOException\fC [protected]\fP"
Writes the map data to the stream\&. This method must be overridden if a subclass must be setup before \fC\fBput()\fP\fP is used\&. 
.PP
Serialization is not one of the JDK's nicest topics\&. Normal serialization will initialise the superclass before the subclass\&. Sometimes however, this isn't what you want, as in this case the \fC\fBput()\fP\fP method on read can be affected by subclass state\&. 
.PP
The solution adopted here is to serialize the state data of this class in this protected method\&. This method must be called by the \fCwriteObject()\fP of the first serializable subclass\&. 
.PP
Subclasses may override if they have a specific field that must be present on read before this implementation will work\&. Generally, the read determines what must be serialized here, if anything\&.
.PP
\fBParameters:\fP
.RS 4
\fIout\fP the output stream 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.ensureCapacity (intnewCapacity)\fC [protected]\fP"
Changes the size of the data structure to the capacity proposed\&.
.PP
\fBParameters:\fP
.RS 4
\fInewCapacity\fP the new capacity of the array (a power of two, less or equal to max) 
.RE
.PP

.SS "int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.entryHashCode (HashEntryentry)\fC [protected]\fP"
Gets the \fChashCode\fP field from a \fCHashEntry\fP\&. Used in subclasses that have no visibility of the field\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to query, must not be null 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fChashCode\fP field of the entry 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINullPointerException\fP if the entry is null 
.RE
.PP
\fBSince:\fP
.RS 4
Commons Collections 3\&.1 
.RE
.PP

.SS "Object org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.entryKey (HashEntryentry)\fC [protected]\fP"
Gets the \fCkey\fP field from a \fCHashEntry\fP\&. Used in subclasses that have no visibility of the field\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to query, must not be null 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCkey\fP field of the entry 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINullPointerException\fP if the entry is null 
.RE
.PP
\fBSince:\fP
.RS 4
Commons Collections 3\&.1 
.RE
.PP

.SS "HashEntry org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.entryNext (HashEntryentry)\fC [protected]\fP"
Gets the \fCnext\fP field from a \fCHashEntry\fP\&. Used in subclasses that have no visibility of the field\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to query, must not be null 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCnext\fP field of the entry 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINullPointerException\fP if the entry is null 
.RE
.PP
\fBSince:\fP
.RS 4
Commons Collections 3\&.1 
.RE
.PP

.SS "Set org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.entrySet ()"
Gets the entrySet view of the map\&. Changes made to the view affect this map\&. To simply iterate through the entries, use \fBmapIterator()\fP\&.
.PP
\fBReturns:\fP
.RS 4
the entrySet view 
.RE
.PP

.SS "Object org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.entryValue (HashEntryentry)\fC [protected]\fP"
Gets the \fCvalue\fP field from a \fCHashEntry\fP\&. Used in subclasses that have no visibility of the field\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to query, must not be null 
.RE
.PP
\fBReturns:\fP
.RS 4
the \fCvalue\fP field of the entry 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINullPointerException\fP if the entry is null 
.RE
.PP
\fBSince:\fP
.RS 4
Commons Collections 3\&.1 
.RE
.PP

.SS "boolean org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.equals (Objectobj)"
Compares this map with another\&.
.PP
\fBParameters:\fP
.RS 4
\fIobj\fP the object to compare to 
.RE
.PP
\fBReturns:\fP
.RS 4
true if equal 
.RE
.PP

.SS "Object org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.get (Objectkey)"
Gets the value mapped to the key specified\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key 
.RE
.PP
\fBReturns:\fP
.RS 4
the mapped value, null if no match 
.RE
.PP

.SS "HashEntry org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.getEntry (Objectkey)\fC [protected]\fP"
Gets the entry mapped to the key specified\&. 
.PP
This method exists for subclasses that may need to perform a multi-step process accessing the entry\&. The public methods in this class don't use this method to gain a small performance boost\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key 
.RE
.PP
\fBReturns:\fP
.RS 4
the entry, null if no match 
.RE
.PP

.SS "int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.hash (Objectkey)\fC [protected]\fP"
Gets the hash code for the key specified\&. This implementation uses the additional hashing routine from JDK1\&.4\&. Subclasses can override this to return alternate hash codes\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key to get a hash code for 
.RE
.PP
\fBReturns:\fP
.RS 4
the hash code 
.RE
.PP

.SS "int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.hashCode ()"
Gets the standard Map hashCode\&.
.PP
\fBReturns:\fP
.RS 4
the hash code defined in the Map interface 
.RE
.PP

.SS "int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.hashIndex (inthashCode, intdataSize)\fC [protected]\fP"
Gets the index into the data storage for the hashCode specified\&. This implementation uses the least significant bits of the hashCode\&. Subclasses can override this to return alternate bucketing\&.
.PP
\fBParameters:\fP
.RS 4
\fIhashCode\fP the hash code to use 
.br
\fIdataSize\fP the size of the data to pick a bucket from 
.RE
.PP
\fBReturns:\fP
.RS 4
the bucket index 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.init ()\fC [protected]\fP"
Initialise subclasses during construction, cloning or deserialization\&. 
.SS "boolean org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.isEmpty ()"
Checks whether the map is currently empty\&.
.PP
\fBReturns:\fP
.RS 4
true if the map is currently size zero 
.RE
.PP

.SS "boolean org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.isEqualKey (Objectkey1, Objectkey2)\fC [protected]\fP"
Compares two keys, in internal converted form, to see if they are equal\&. This implementation uses the equals method and assumes neither key is null\&. Subclasses can override this to match differently\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey1\fP the first key to compare passed in from outside 
.br
\fIkey2\fP the second key extracted from the entry via \fCentry\&.key\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
true if equal 
.RE
.PP

.SS "boolean org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.isEqualValue (Objectvalue1, Objectvalue2)\fC [protected]\fP"
Compares two values, in external form, to see if they are equal\&. This implementation uses the equals method and assumes neither value is null\&. Subclasses can override this to match differently\&.
.PP
\fBParameters:\fP
.RS 4
\fIvalue1\fP the first value to compare passed in from outside 
.br
\fIvalue2\fP the second value extracted from the entry via \fCgetValue()\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
true if equal 
.RE
.PP

.SS "Set org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.keySet ()"
Gets the keySet view of the map\&. Changes made to the view affect this map\&. To simply iterate through the keys, use \fBmapIterator()\fP\&.
.PP
\fBReturns:\fP
.RS 4
the keySet view 
.RE
.PP

.SS "\fBMapIterator\fP org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.mapIterator ()"
Gets an iterator over the map\&. Changes made to the iterator affect this map\&. 
.PP
A \fBMapIterator\fP returns the keys in the map\&. It also provides convenient methods to get the key and value, and set the value\&. It avoids the need to create an entrySet/keySet/values object\&. It also avoids creating the Map\&.Entry object\&.
.PP
\fBReturns:\fP
.RS 4
the map iterator 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.collections\&.IterableMap\fP\&.
.SS "Object org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.put (Objectkey, Objectvalue)"
Puts a key-value mapping into this map\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the key to add 
.br
\fIvalue\fP the value to add 
.RE
.PP
\fBReturns:\fP
.RS 4
the value previously mapped to this key, null if none 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.putAll (Mapmap)"
Puts all the values from the specified map into this map\&. 
.PP
This implementation iterates around the specified map and uses \fBput(Object, Object)\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fImap\fP the map to add 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINullPointerException\fP if the map is null 
.RE
.PP

.SS "Object org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.remove (Objectkey)"
Removes the specified mapping from this map\&.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP the mapping to remove 
.RE
.PP
\fBReturns:\fP
.RS 4
the value mapped to the removed key, null if key not in map 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.removeEntry (HashEntryentry, inthashIndex, HashEntryprevious)\fC [protected]\fP"
Removes an entry from the chain stored in a particular index\&. 
.PP
This implementation removes the entry from the data storage table\&. The size is not updated\&. Subclasses could override to handle changes to the map\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to remove 
.br
\fIhashIndex\fP the index into the data structure 
.br
\fIprevious\fP the previous entry in the chain 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.removeMapping (HashEntryentry, inthashIndex, HashEntryprevious)\fC [protected]\fP"
Removes a mapping from the map\&. 
.PP
This implementation calls \fC\fBremoveEntry()\fP\fP and \fC\fBdestroyEntry()\fP\fP\&. It also handles changes to \fCmodCount\fP and \fCsize\fP\&. Subclasses could override to fully control removals from the map\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to remove 
.br
\fIhashIndex\fP the index into the data structure 
.br
\fIprevious\fP the previous entry in the chain 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.reuseEntry (HashEntryentry, inthashIndex, inthashCode, Objectkey, Objectvalue)\fC [protected]\fP"
Reuses an existing key-value mapping, storing completely new data\&. 
.PP
This implementation sets all the data fields on the entry\&. Subclasses could populate additional entry fields\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to update, not null 
.br
\fIhashIndex\fP the index in the data array 
.br
\fIhashCode\fP the hash code of the key to add 
.br
\fIkey\fP the key to add 
.br
\fIvalue\fP the value to add 
.RE
.PP

.SS "int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.size ()"
Gets the size of the map\&.
.PP
\fBReturns:\fP
.RS 4
the size 
.RE
.PP

.SS "String org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.toString ()"
Gets the map as a String\&.
.PP
\fBReturns:\fP
.RS 4
a string version of the map 
.RE
.PP

.SS "void org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.updateEntry (HashEntryentry, ObjectnewValue)\fC [protected]\fP"
Updates an existing key-value mapping to change the value\&. 
.PP
This implementation calls \fCsetValue()\fP on the entry\&. Subclasses could override to handle changes to the map\&.
.PP
\fBParameters:\fP
.RS 4
\fIentry\fP the entry to update 
.br
\fInewValue\fP the new value to store 
.RE
.PP

.SS "Collection org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.values ()"
Gets the values view of the map\&. Changes made to the view affect this map\&. To simply iterate through the values, use \fBmapIterator()\fP\&.
.PP
\fBReturns:\fP
.RS 4
the values view 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "transient HashEntry [] org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.data\fC [protected]\fP"
Map entries 
.SS "final int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.DEFAULT_CAPACITY = 16\fC [static]\fP, \fC [protected]\fP"
The default capacity to use 
.SS "final float org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.DEFAULT_LOAD_FACTOR = 0\&.75f\fC [static]\fP, \fC [protected]\fP"
The default load factor to use 
.SS "final int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.DEFAULT_THRESHOLD = 12\fC [static]\fP, \fC [protected]\fP"
The default threshold to use 
.SS "transient EntrySet org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.entrySet\fC [protected]\fP"
Entry set 
.SS "transient KeySet org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.keySet\fC [protected]\fP"
Key set 
.SS "transient float org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.loadFactor\fC [protected]\fP"
Load factor, normally 0\&.75 
.SS "final int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.MAXIMUM_CAPACITY = 1 << 30\fC [static]\fP, \fC [protected]\fP"
The maximum capacity allowed 
.SS "transient int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.modCount\fC [protected]\fP"
Modification count for iterators 
.SS "final Object org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.NULL = new Object()\fC [static]\fP, \fC [protected]\fP"
An object for masking null 
.SS "transient int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.size\fC [protected]\fP"
The size of the map 
.SS "transient int org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.threshold\fC [protected]\fP"
Size at which to rehash 
.SS "transient Values org\&.apache\&.commons\&.collections\&.map\&.AbstractHashedMap\&.values\fC [protected]\fP"
Values 

.SH "Author"
.PP 
Generated automatically by Doxygen for Desmo-J from the source code\&.
