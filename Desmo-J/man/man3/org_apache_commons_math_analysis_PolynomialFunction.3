.TH "org.apache.commons.math.analysis.PolynomialFunction" 3 "Wed Dec 4 2013" "Version 1.0" "Desmo-J" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.apache.commons.math.analysis.PolynomialFunction \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBorg\&.apache\&.commons\&.math\&.analysis\&.DifferentiableUnivariateRealFunction\fP, and Serializable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPolynomialFunction\fP (double c[])"
.br
.ti -1c
.RI "double \fBvalue\fP (double x)"
.br
.ti -1c
.RI "int \fBdegree\fP ()"
.br
.ti -1c
.RI "double[] \fBgetCoefficients\fP ()"
.br
.ti -1c
.RI "\fBPolynomialFunction\fP \fBpolynomialDerivative\fP ()"
.br
.ti -1c
.RI "\fBUnivariateRealFunction\fP \fBderivative\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static double \fBevaluate\fP (double[] coefficients, double argument)"
.br
.ti -1c
.RI "static double[] \fBdifferentiate\fP (double[] coefficients)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Immutable representation of a real polynomial function with real coefficients\&. 
.PP
\fCHorner's Method\fP is used to evaluate the function\&.
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision:\fP
.RS 4
615734 
.RE
.PP
\fBDate:\fP
.RS 4
2008-01-27 23:10:03 -0700 (Sun, 27 Jan 2008) 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.apache\&.commons\&.math\&.analysis\&.PolynomialFunction\&.PolynomialFunction (doublec[])"
Construct a polynomial with the given coefficients\&. The first element of the coefficients array is the constant term\&. Higher degree coefficients follow in sequence\&. The degree of the resulting polynomial is the length of the array minus 1\&. 
.PP
The constructor makes a copy of the input array and assigns the copy to the coefficients property\&.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP polynominal coefficients 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINullPointerException\fP if c is null 
.br
\fIIllegalArgumentException\fP if c is empty 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "int org\&.apache\&.commons\&.math\&.analysis\&.PolynomialFunction\&.degree ()"
Returns the degree of the polynomial
.PP
\fBReturns:\fP
.RS 4
the degree of the polynomial 
.RE
.PP

.SS "\fBUnivariateRealFunction\fP org\&.apache\&.commons\&.math\&.analysis\&.PolynomialFunction\&.derivative ()"
Returns the derivative as a \fBUnivariateRealFunction\fP
.PP
\fBReturns:\fP
.RS 4
the derivative function 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.analysis\&.DifferentiableUnivariateRealFunction\fP\&.
.SS "static double [] org\&.apache\&.commons\&.math\&.analysis\&.PolynomialFunction\&.differentiate (double[]coefficients)\fC [static]\fP, \fC [protected]\fP"
Returns the coefficients of the derivative of the polynomial with the given coefficients\&.
.PP
\fBParameters:\fP
.RS 4
\fIcoefficients\fP the coefficients of the polynomial to differentiate 
.RE
.PP
\fBReturns:\fP
.RS 4
the coefficients of the derivative or null if coefficients has length 1\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIllegalArgumentException\fP if coefficients is empty 
.br
\fINullPointerException\fP if coefficients is null 
.RE
.PP

.SS "static double org\&.apache\&.commons\&.math\&.analysis\&.PolynomialFunction\&.evaluate (double[]coefficients, doubleargument)\fC [static]\fP, \fC [protected]\fP"
Uses Horner's Method to evaluate the polynomial with the given coefficients at the argument\&.
.PP
\fBParameters:\fP
.RS 4
\fIcoefficients\fP the coefficients of the polynomial to evaluate 
.br
\fIargument\fP the input value 
.RE
.PP
\fBReturns:\fP
.RS 4
the value of the polynomial 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIllegalArgumentException\fP if coefficients is empty 
.br
\fINullPointerException\fP if coefficients is null 
.RE
.PP

.SS "double [] org\&.apache\&.commons\&.math\&.analysis\&.PolynomialFunction\&.getCoefficients ()"
Returns a copy of the coefficients array\&. 
.PP
Changes made to the returned copy will not affect the coefficients of the polynomial\&.
.PP
\fBReturns:\fP
.RS 4
a fresh copy of the coefficients array 
.RE
.PP

.SS "\fBPolynomialFunction\fP org\&.apache\&.commons\&.math\&.analysis\&.PolynomialFunction\&.polynomialDerivative ()"
Returns the derivative as a PolynomialRealFunction
.PP
\fBReturns:\fP
.RS 4
the derivative polynomial 
.RE
.PP

.SS "double org\&.apache\&.commons\&.math\&.analysis\&.PolynomialFunction\&.value (doublex)"
Compute the value of the function for the given argument\&. 
.PP
The value returned is 
.br
 \fCcoefficients[n] * x^n + \&.\&.\&. + coefficients[1] * x + coefficients[0]\fP 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the argument for which the function value should be computed 
.RE
.PP
\fBReturns:\fP
.RS 4
the value of the polynomial at the given point 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBUnivariateRealFunction::value(double)\fP 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.analysis\&.UnivariateRealFunction\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Desmo-J from the source code\&.
