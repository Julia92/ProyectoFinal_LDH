.TH "org.apache.commons.math.analysis.PolynomialSplineFunction" 3 "Wed Dec 4 2013" "Version 1.0" "Desmo-J" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.apache.commons.math.analysis.PolynomialSplineFunction \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBorg\&.apache\&.commons\&.math\&.analysis\&.DifferentiableUnivariateRealFunction\fP, and Serializable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPolynomialSplineFunction\fP (double knots[], \fBPolynomialFunction\fP polynomials[])"
.br
.ti -1c
.RI "double \fBvalue\fP (double v)  throws ArgumentOutsideDomainException "
.br
.ti -1c
.RI "\fBUnivariateRealFunction\fP \fBderivative\fP ()"
.br
.ti -1c
.RI "\fBPolynomialSplineFunction\fP \fBpolynomialSplineDerivative\fP ()"
.br
.ti -1c
.RI "int \fBgetN\fP ()"
.br
.ti -1c
.RI "\fBPolynomialFunction\fP[] \fBgetPolynomials\fP ()"
.br
.ti -1c
.RI "double[] \fBgetKnots\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
Represents a polynomial spline function\&. 
.PP
A \fBpolynomial spline function\fP consists of a set of \fIinterpolating polynomials\fP and an ascending array of domain \fIknot points\fP, determining the intervals over which the spline function is defined by the constituent polynomials\&. The polynomials are assumed to have been computed to match the values of another function at the knot points\&. The value consistency constraints are not currently enforced by \fC\fBPolynomialSplineFunction\fP\fP itself, but are assumed to hold among the polynomials and knot points passed to the constructor\&.
.PP
N\&.B\&.: The polynomials in the \fCpolynomials\fP property must be centered on the knot points to compute the spline function values\&. See below\&.
.PP
The domain of the polynomial spline function is \fC[smallest knot, largest knot]\fP\&. Attempts to evaluate the function at values outside of this range generate IllegalArgumentExceptions\&. 
.PP
The value of the polynomial spline function for an argument \fCx\fP is computed as follows: 
.PD 0

.IP "1." 4
The knot array is searched to find the segment to which \fCx\fP belongs\&. If \fCx\fP is less than the smallest knot point or greater than the largest one, an \fCIllegalArgumentException\fP is thrown\&. 
.IP "2." 4
Let \fCj\fP be the index of the largest knot point that is less than or equal to \fCx\fP\&. The value returned is 
.br
 \fCpolynomials[j](x - knot[j])\fP
.PP
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision:\fP
.RS 4
615734 
.RE
.PP
\fBDate:\fP
.RS 4
2008-01-27 23:10:03 -0700 (Sun, 27 Jan 2008) 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.apache\&.commons\&.math\&.analysis\&.PolynomialSplineFunction\&.PolynomialSplineFunction (doubleknots[], \fBPolynomialFunction\fPpolynomials[])"
Construct a polynomial spline function with the given segment delimiters and interpolating polynomials\&. 
.PP
The constructor copies both arrays and assigns the copies to the knots and polynomials properties, respectively\&.
.PP
\fBParameters:\fP
.RS 4
\fIknots\fP spline segment interval delimiters 
.br
\fIpolynomials\fP polynomial functions that make up the spline 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fINullPointerException\fP if either of the input arrays is null 
.br
\fIIllegalArgumentException\fP if knots has length less than 2, \fCpolynomials\&.length != knots\&.length - 1 \fP, or the knots array is not strictly increasing\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBUnivariateRealFunction\fP org\&.apache\&.commons\&.math\&.analysis\&.PolynomialSplineFunction\&.derivative ()"
Returns the derivative of the polynomial spline function as a \fBUnivariateRealFunction\fP 
.PP
\fBReturns:\fP
.RS 4
the derivative function 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.analysis\&.DifferentiableUnivariateRealFunction\fP\&.
.SS "double [] org\&.apache\&.commons\&.math\&.analysis\&.PolynomialSplineFunction\&.getKnots ()"
Returns an array copy of the knot points\&. 
.PP
Returns a fresh copy of the array\&. Changes made to the copy will not affect the knots property\&.
.PP
\fBReturns:\fP
.RS 4
the knot points 
.RE
.PP

.SS "int org\&.apache\&.commons\&.math\&.analysis\&.PolynomialSplineFunction\&.getN ()"
Returns the number of spline segments = the number of polynomials = the number of knot points - 1\&.
.PP
\fBReturns:\fP
.RS 4
the number of spline segments 
.RE
.PP

.SS "\fBPolynomialFunction\fP [] org\&.apache\&.commons\&.math\&.analysis\&.PolynomialSplineFunction\&.getPolynomials ()"
Returns a copy of the interpolating polynomials array\&. 
.PP
Returns a fresh copy of the array\&. Changes made to the copy will not affect the polynomials property\&.
.PP
\fBReturns:\fP
.RS 4
the interpolating polynomials 
.RE
.PP

.SS "\fBPolynomialSplineFunction\fP org\&.apache\&.commons\&.math\&.analysis\&.PolynomialSplineFunction\&.polynomialSplineDerivative ()"
Returns the derivative of the polynomial spline function as a \fBPolynomialSplineFunction\fP
.PP
\fBReturns:\fP
.RS 4
the derivative function 
.RE
.PP

.SS "double org\&.apache\&.commons\&.math\&.analysis\&.PolynomialSplineFunction\&.value (doublev) throws \fBArgumentOutsideDomainException\fP"
Compute the value for the function\&. 
.PP
Throws \fBFunctionEvaluationException\fP if v is outside of the domain of the function\&. The domain is [smallest knot, largest knot]\&.
.PP
See \fBPolynomialSplineFunction\fP for details on the algorithm for computing the value of the function\&.
.PP
\fBParameters:\fP
.RS 4
\fIv\fP the point for which the function value should be computed 
.RE
.PP
\fBReturns:\fP
.RS 4
the value 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fI\fBArgumentOutsideDomainException\fP\fP if v is outside of the domain of of the spline function (less than the smallest knot point or greater than the largest knot point) 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.analysis\&.UnivariateRealFunction\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Desmo-J from the source code\&.
