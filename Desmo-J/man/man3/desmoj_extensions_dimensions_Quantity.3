.TH "desmoj.extensions.dimensions.Quantity" 3 "Wed Dec 4 2013" "Version 1.0" "Desmo-J" \" -*- nroff -*-
.ad l
.nh
.SH NAME
desmoj.extensions.dimensions.Quantity \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBdesmoj\&.core\&.simulator\&.Units\fP, and Comparable\&.
.PP
Inherited by \fBdesmoj\&.extensions\&.dimensions\&.Duration\fP, \fBdesmoj\&.extensions\&.dimensions\&.Length\fP, and \fBdesmoj\&.extensions\&.dimensions\&.Velocity\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQuantity\fP (double \fBvalue\fP, int \fBunit\fP)"
.br
.ti -1c
.RI "\fBQuantity\fP ()"
.br
.ti -1c
.RI "double \fBgetValue\fP (int \fBunit\fP)"
.br
.ti -1c
.RI "double \fBgetValue\fP ()"
.br
.ti -1c
.RI "abstract boolean \fBisValidUnit\fP (int \fBunit\fP)"
.br
.ti -1c
.RI "abstract int \fBdefaultUnit\fP ()"
.br
.ti -1c
.RI "boolean \fBisValidValue\fP (double \fBvalue\fP)"
.br
.ti -1c
.RI "int \fBgetUnit\fP ()"
.br
.ti -1c
.RI "void \fBsetUnit\fP (int \fBunit\fP)"
.br
.ti -1c
.RI "String \fBtoString\fP (int floats)"
.br
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.ti -1c
.RI "int \fBcompareTo\fP (Object that)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "double \fBvalue\fP"
.br
.ti -1c
.RI "int \fBunit\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
An abstract base class for physical quantities with a unit (e\&.g\&. \fBLength\fP, \fBVelocity\fP, etc\&.)\&.
.PP
\fBVersion:\fP
.RS 4
DESMO-J, Ver\&. 2\&.4\&.0 copyright (c) 2013 
.RE
.PP
\fBAuthor:\fP
.RS 4
Nick Knaak and Ruth Meyer
.RE
.PP
Licensed under the Apache License, Version 2\&.0 (the 'License'); you may not use this file except in compliance with the License\&. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
.PP
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied\&. See the License for the specific language governing permissions and limitations under the License\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "desmoj\&.extensions\&.dimensions\&.Quantity\&.Quantity (doublevalue, intunit)"
Creates a new \fBQuantity\fP with the given value and unit\&. If the unit is invalid a quantity with value 0\&.0 and the default unit is created\&. 
.SS "desmoj\&.extensions\&.dimensions\&.Quantity\&.Quantity ()"
Creates an 'empty' quantity with value 0\&.0 and the default unit\&. 
.SH "Member Function Documentation"
.PP 
.SS "int desmoj\&.extensions\&.dimensions\&.Quantity\&.compareTo (Objectthat)"
Compares this quantity with the given object\&. If \fCthat\fP is of type \fBQuantity\fP the comparison results in: -1 : if this < that 0 : if this == that 1 : if this > that
.PP
\fBExceptions:\fP
.RS 4
\fIClassCastException\fP if \fCthat\fP is not a \fBQuantity\fP object 
.RE
.PP

.SS "abstract int desmoj\&.extensions\&.dimensions\&.Quantity\&.defaultUnit ()\fC [pure virtual]\fP"
Returns this quantities default unit\&. 
.PP
Implemented in \fBdesmoj\&.extensions\&.dimensions\&.Velocity\fP, \fBdesmoj\&.extensions\&.dimensions\&.Duration\fP, and \fBdesmoj\&.extensions\&.dimensions\&.Length\fP\&.
.SS "int desmoj\&.extensions\&.dimensions\&.Quantity\&.getUnit ()"
Returns the unit of this quantity as one of the constants of the interface \fBUnits\fP 
.SS "double desmoj\&.extensions\&.dimensions\&.Quantity\&.getValue (intunit)"
Returns the numerical value of this quantity in terms of the specified unit\&. Value and unit of this quantity object remain unchanged\&.
.PP
\fBParameters:\fP
.RS 4
\fIunit\fP int : the unit as one of the constants of the interface \fBUnits\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
the value converted to the specified unit (or Double\&.NaN if the unit is invalid for this quantity) 
.RE
.PP

.SS "double desmoj\&.extensions\&.dimensions\&.Quantity\&.getValue ()"
Returns the numerical value in the current unit as a double 
.SS "abstract boolean desmoj\&.extensions\&.dimensions\&.Quantity\&.isValidUnit (intunit)\fC [pure virtual]\fP"
Should return true if this unit is valid for a certain subclass of \fBQuantity\fP (e\&.g\&. MM, CM, M, etc\&. for \fBLength\fP)\&. 
.PP
Implemented in \fBdesmoj\&.extensions\&.dimensions\&.Velocity\fP, \fBdesmoj\&.extensions\&.dimensions\&.Length\fP, and \fBdesmoj\&.extensions\&.dimensions\&.Duration\fP\&.
.SS "boolean desmoj\&.extensions\&.dimensions\&.Quantity\&.isValidValue (doublevalue)"
Returns true if a given value is valid for this quantity and false otherwise\&. The default implementation returns true for non-negative values only\&. 
.SS "void desmoj\&.extensions\&.dimensions\&.Quantity\&.setUnit (intunit)"
Changes this quantity's unit to the given unit\&. If an invalid unit is specified the old unit remains unchanged\&.
.PP
\fBParameters:\fP
.RS 4
\fIunit\fP int : the new unit to which this quantity shall be converted 
.RE
.PP

.SS "String desmoj\&.extensions\&.dimensions\&.Quantity\&.toString (intfloats)"
Returns a string representation of the quantity with at most \fCfloats\fP decimals\&. 
.SS "String desmoj\&.extensions\&.dimensions\&.Quantity\&.toString ()"
Returns a string representation of this quantity (=
.PP
<unit>) 
.SH "Member Data Documentation"
.PP 
.SS "int desmoj\&.extensions\&.dimensions\&.Quantity\&.unit\fC [protected]\fP"
The quantity's unit (
.PP
\fBSee Also:\fP
.RS 4
desmoj\&.Units) 
.RE
.PP

.SS "double desmoj\&.extensions\&.dimensions\&.Quantity\&.value\fC [protected]\fP"
The quantity's numerical value 

.SH "Author"
.PP 
Generated automatically by Doxygen for Desmo-J from the source code\&.
