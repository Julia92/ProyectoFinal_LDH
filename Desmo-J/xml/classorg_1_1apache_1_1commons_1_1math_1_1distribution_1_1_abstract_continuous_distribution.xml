<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution" kind="class" prot="public" abstract="yes">
    <compoundname>org::apache::commons::math::distribution::AbstractContinuousDistribution</compoundname>
    <basecompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.AbstractDistribution</basecompoundref>
    <basecompoundref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.ContinuousDistribution</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Serializable</basecompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_cauchy_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.CauchyDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_chi_squared_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.ChiSquaredDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_exponential_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.ExponentialDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_f_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.FDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.GammaDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.NormalDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.TDistributionImpl</derivedcompoundref>
    <derivedcompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_weibull_distribution_impl" prot="public" virt="non-virtual">org.apache.commons.math.distribution.WeibullDistributionImpl</derivedcompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1ad4eea60afec3f6b5752e62290edab2f3" prot="private" static="yes" mutable="no">
        <type>final long</type>
        <definition>final long org.apache.commons.math.distribution.AbstractContinuousDistribution.serialVersionUID</definition>
        <argsstring></argsstring>
        <name>serialVersionUID</name>
        <initializer>= -38038050983108802L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serializable version identifier </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" line="39" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1ad2268d4983e173bb3628fba19d93b2e4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.commons.math.distribution.AbstractContinuousDistribution.AbstractContinuousDistribution</definition>
        <argsstring>()</argsstring>
        <name>AbstractContinuousDistribution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" line="44" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a24d1238e49baef8a236e66c77ce0db3e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract double</type>
        <definition>abstract double org.apache.commons.math.distribution.AbstractContinuousDistribution.getInitialDomain</definition>
        <argsstring>(double p)</argsstring>
        <name>getInitialDomain</name>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_f_distribution_impl_1a7c745748e97edc5e897c5b55d23e2c9e">getInitialDomain</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1ae16c30909eaab90a2860dec4c0a88103">getInitialDomain</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_chi_squared_distribution_impl_1a414d56d300981b66d533bb3367964198">getInitialDomain</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_exponential_distribution_impl_1ad1e731bab297890aba0e1e76c409f473">getInitialDomain</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_weibull_distribution_impl_1a48f4d70cd68c49e6f4b153e83ef9df5f">getInitialDomain</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_cauchy_distribution_impl_1ad2063ab040ce46ede16bf5e91acebadb">getInitialDomain</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a291d340d1b792ffc364d8705a2ee66a2">getInitialDomain</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a56a45a425188b7c4f628e64d528e45f5">getInitialDomain</reimplementedby>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the initial domain value, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>initial domain value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a7c65e91d5a1eb53a5bd309b58e36e966" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract double</type>
        <definition>abstract double org.apache.commons.math.distribution.AbstractContinuousDistribution.getDomainLowerBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainLowerBound</name>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_f_distribution_impl_1adf458f6eeef1f4b8a4e1be3c9bcf0e9f">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_chi_squared_distribution_impl_1af38c9647100c371f9e5e45fdaba2de58">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_exponential_distribution_impl_1a0975497fcb91594fce9bab973aec78a3">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a4c275b4559fafccad914163c190e3598">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_cauchy_distribution_impl_1a8bffbd515a23e358d22c6286cf88b009">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_weibull_distribution_impl_1a2e1e6cd66dda22ae8c973c653fe3b991">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ac104cdef724e23a4ebea86a7c2a1c82b">getDomainLowerBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a6856b76c38e1be45ccfe34f375de8143">getDomainLowerBound</reimplementedby>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value lower bound, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value lower bound, i.e. P(X &lt; <emphasis>lower bound</emphasis>) &lt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1aeb69c1dd57e233b023edc88155108191" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>abstract double</type>
        <definition>abstract double org.apache.commons.math.distribution.AbstractContinuousDistribution.getDomainUpperBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainUpperBound</name>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_f_distribution_impl_1a373cadfcd03b695d5e5cb852bcbb2ba9">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_chi_squared_distribution_impl_1a237c1987d80f493feb91f792c2bdeeda">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_exponential_distribution_impl_1ab171552c6abf05633a0843cbf276dcdb">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl_1a7a3d33f5e49a8d919814d2c13e64ff93">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_weibull_distribution_impl_1a3dc2759c9496d9657e31a90ecd20118f">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_cauchy_distribution_impl_1a6c5e05f7bac5f7f04b83842d16e133e9">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a1f79db04419180c3f4154cb6750d358f">getDomainUpperBound</reimplementedby>
        <reimplementedby refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl_1a315049dcf42c84d1de37a6fd34fd34a0">getDomainUpperBound</reimplementedby>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value upper bound, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value upper bound, i.e. P(X &lt; <emphasis>upper bound</emphasis>) &gt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" line="142" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a3513ebf40ad2847679c81d160e16611c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.AbstractContinuousDistribution.inverseCumulativeProbability</definition>
        <argsstring>(final double p)</argsstring>
        <name>inverseCumulativeProbability</name>
        <param>
          <type>final double</type>
          <declname>p</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For this distribution, X, this method returns the critical point x, such that P(X &lt; x) = <computeroutput>p</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>x, such that P(X &lt; x) = <computeroutput>p</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the inverse cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>p</computeroutput> is not a valid probability. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" line="59" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" bodystart="59" bodyend="110"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a240f9e95109838d7a1dfb5af57c2ebd2" compoundref="_abstract_distribution_8java" startline="58" endline="65">org.apache.commons.math.distribution.AbstractDistribution.cumulativeProbability</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception_1ab6959c6786a7152e04df1cb605e67d9f" compoundref="_math_exception_8java" startline="210" endline="212">org.apache.commons.math.MathException.getPattern</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a7c65e91d5a1eb53a5bd309b58e36e966">org.apache.commons.math.distribution.AbstractContinuousDistribution.getDomainLowerBound</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1aeb69c1dd57e233b023edc88155108191">org.apache.commons.math.distribution.AbstractContinuousDistribution.getDomainUpperBound</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a24d1238e49baef8a236e66c77ce0db3e">org.apache.commons.math.distribution.AbstractContinuousDistribution.getInitialDomain</references>
        <references refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1analysis_1_1_univariate_real_function_1a0e7a98f515a5fecfb77a21244e70b919">org.apache.commons.math.analysis.UnivariateRealFunction.value</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for continuous distributions. Default implementations are provided for some of the methods that do not vary from distribution to distribution.</para><para><simplesect kind="version"><para></para></simplesect>
<simplesect kind="rcs"><title>Revision:</title><para>506600 </para></simplesect>
<simplesect kind="rcs"><title>Date:</title><para>2007-02-12 12:35:59 -0700 (Mon, 12 Feb 2007) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="5741">
        <label>org.apache.commons.math.distribution.ContinuousDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution"/>
        <childnode refid="5739" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5740">
        <label>Serializable</label>
      </node>
      <node id="5743">
        <label>org.apache.commons.math.distribution.ChiSquaredDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_chi_squared_distribution_impl"/>
        <childnode refid="5737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5737">
        <label>org.apache.commons.math.distribution.AbstractContinuousDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution"/>
        <childnode refid="5738" relation="public-inheritance">
        </childnode>
        <childnode refid="5741" relation="public-inheritance">
        </childnode>
        <childnode refid="5740" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5742">
        <label>org.apache.commons.math.distribution.CauchyDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_cauchy_distribution_impl"/>
        <childnode refid="5737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5744">
        <label>org.apache.commons.math.distribution.ExponentialDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_exponential_distribution_impl"/>
        <childnode refid="5737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5748">
        <label>org.apache.commons.math.distribution.TDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_t_distribution_impl"/>
        <childnode refid="5737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5738">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="5739" relation="public-inheritance">
        </childnode>
        <childnode refid="5740" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5749">
        <label>org.apache.commons.math.distribution.WeibullDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_weibull_distribution_impl"/>
        <childnode refid="5737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5745">
        <label>org.apache.commons.math.distribution.FDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_f_distribution_impl"/>
        <childnode refid="5737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5746">
        <label>org.apache.commons.math.distribution.GammaDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl"/>
        <childnode refid="5737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5739">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
      <node id="5747">
        <label>org.apache.commons.math.distribution.NormalDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_normal_distribution_impl"/>
        <childnode refid="5737" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5754">
        <label>org.apache.commons.math.distribution.ContinuousDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution"/>
        <childnode refid="5752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5753">
        <label>Serializable</label>
      </node>
      <node id="5750">
        <label>org.apache.commons.math.distribution.AbstractContinuousDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution"/>
        <childnode refid="5751" relation="public-inheritance">
        </childnode>
        <childnode refid="5754" relation="public-inheritance">
        </childnode>
        <childnode refid="5753" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5751">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="5752" relation="public-inheritance">
        </childnode>
        <childnode refid="5753" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5752">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" line="36" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/AbstractContinuousDistribution.java" bodystart="34" bodyend="143"/>
    <listofallmembers>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1ad2268d4983e173bb3628fba19d93b2e4" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>AbstractContinuousDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a69b03d7cd00b00c946eea69dfa8da7ba" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>AbstractDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a240f9e95109838d7a1dfb5af57c2ebd2" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>cumulativeProbability</name></member>
      <member refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution_1a72faeb4e48d8607d791fcb3fa9afb0e3" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::Distribution."><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a7c65e91d5a1eb53a5bd309b58e36e966" prot="protected" virt="pure-virtual"><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>getDomainLowerBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1aeb69c1dd57e233b023edc88155108191" prot="protected" virt="pure-virtual"><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>getDomainUpperBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a24d1238e49baef8a236e66c77ce0db3e" prot="protected" virt="pure-virtual"><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>getInitialDomain</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a3513ebf40ad2847679c81d160e16611c" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>inverseCumulativeProbability</name></member>
      <member refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::ContinuousDistribution."><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>inverseCumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1ad4eea60afec3f6b5752e62290edab2f3" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::AbstractContinuousDistribution</scope><name>serialVersionUID</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
