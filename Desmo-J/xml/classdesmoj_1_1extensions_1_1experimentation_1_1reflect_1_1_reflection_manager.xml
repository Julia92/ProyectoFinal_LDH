<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager" kind="class" prot="public">
    <compoundname>desmoj::extensions::experimentation::reflect::ReflectionManager</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1a9825de961f598cc2464b475331c654e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Method</type>
        <definition>static Method desmoj.extensions.experimentation.reflect.ReflectionManager.getMethod</definition>
        <argsstring>(Class c, String methodName, Class[] params)</argsstring>
        <name>getMethod</name>
        <param>
          <type>Class</type>
          <declname>c</declname>
        </param>
        <param>
          <type>String</type>
          <declname>methodName</declname>
        </param>
        <param>
          <type>Class[]</type>
          <declname>params</declname>
        </param>
        <exceptions> throws <ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a method of a given class. If anything goes wrong a <ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref> is thrown. In this implementation only methods declared directly by the given class are found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the class </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>methodName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the method </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter list of the method </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the method </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" line="43" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" bodystart="43" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1abf3cd9fac5e3c84d7ce46c517bb6e953" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Method</type>
        <definition>static Method desmoj.extensions.experimentation.reflect.ReflectionManager.getMethod</definition>
        <argsstring>(Class c, String methodName)</argsstring>
        <name>getMethod</name>
        <param>
          <type>Class</type>
          <declname>c</declname>
        </param>
        <param>
          <type>String</type>
          <declname>methodName</declname>
        </param>
        <exceptions> throws <ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a method of a given class with an empty parameter list. If anything goes wrong a <ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref> is thrown. In this implementation only methods declared directly by the given class are found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the class </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>methodName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the method </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the method </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" line="68" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" bodystart="68" bodyend="71"/>
        <references refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1a9825de961f598cc2464b475331c654e9" compoundref="_reflection_manager_8java" startline="43" endline="54">desmoj.extensions.experimentation.reflect.ReflectionManager.getMethod</references>
      </memberdef>
      <memberdef kind="function" id="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1aa31e3edbfc76a6669dfc58c314a50061" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Object</type>
        <definition>static Object desmoj.extensions.experimentation.reflect.ReflectionManager.invokeMethod</definition>
        <argsstring>(Object owner, Method method, Object[] args)</argsstring>
        <name>invokeMethod</name>
        <param>
          <type>Object</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>Method</type>
          <declname>method</declname>
        </param>
        <param>
          <type>Object[]</type>
          <declname>args</declname>
        </param>
        <exceptions> throws <ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invokes a method on an object If anything goes wrong a reflect exception is thrown</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>the object to invoke the method on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>the method to be invoked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments of the method call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return value of the method call </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" line="86" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" bodystart="86" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1a32374ff9684a8cf750f58057c489e36b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Constructor</type>
        <definition>static Constructor desmoj.extensions.experimentation.reflect.ReflectionManager.getConstructor</definition>
        <argsstring>(Class c, Class[] params)</argsstring>
        <name>getConstructor</name>
        <param>
          <type>Class</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Class[]</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a constructor from a given class. If anything goes wrong a reflect exception is thrown</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the class </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>the constructor&apos;s parameter list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a constructor object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" line="109" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1a191c3caee04e5ae6b6f925df1d872e5c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Object</type>
        <definition>static Object desmoj.extensions.experimentation.reflect.ReflectionManager.invokeConstructor</definition>
        <argsstring>(Constructor c, Object[] args)</argsstring>
        <name>invokeConstructor</name>
        <param>
          <type>Constructor</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Object[]</type>
          <declname>args</declname>
        </param>
        <exceptions> throws <ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invokes a constructor. If anything goes wrong a reflect exception is thrown</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the constructor object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>the arguments for the constructor invocation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the object created by the constructor </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" line="133" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" bodystart="133" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1adadb1cdf397f771c0583f37d7cd59af3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Field</type>
        <definition>static Field desmoj.extensions.experimentation.reflect.ReflectionManager.getField</definition>
        <argsstring>(Class c, String fieldName)</argsstring>
        <name>getField</name>
        <param>
          <type>Class</type>
          <declname>c</declname>
        </param>
        <param>
          <type>String</type>
          <declname>fieldName</declname>
        </param>
        <exceptions> throws <ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves a field from a given class. In this implementation only fields declared directly by the given class are found. On errors a reflect exception is thrown.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the class </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldName</parametername>
</parameternamelist>
<parameterdescription>
<para>the field name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a field object </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" line="161" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" bodystart="161" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1ac38e8f20361f2e2030be9083e18993a2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Object</type>
        <definition>static Object desmoj.extensions.experimentation.reflect.ReflectionManager.getValue</definition>
        <argsstring>(Object owner, Field field)</argsstring>
        <name>getValue</name>
        <param>
          <type>Object</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>Field</type>
          <declname>field</declname>
        </param>
        <exceptions> throws <ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value of the given field has in the specified object. On any error a reflect exception is thrown</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>the object who owns the field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>the field </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the current field value </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" line="191" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1afd04290d29e88bc7df674a548a87ff96" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void desmoj.extensions.experimentation.reflect.ReflectionManager.setValue</definition>
        <argsstring>(Object owner, Field field, Object value)</argsstring>
        <name>setValue</name>
        <param>
          <type>Object</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>Field</type>
          <declname>field</declname>
        </param>
        <param>
          <type>Object</type>
          <declname>value</declname>
        </param>
        <exceptions> throws <ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the value of the given field of the specified object. On errors a reflect exception is thrown.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>the object owning the field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>the field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to set the field to </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflect_exception" kindref="compound">ReflectException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" line="213" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" bodystart="213" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A utility class for using the Java Reflection API.</para><para><simplesect kind="version"><para>DESMO-J, Ver. 2.4.0 copyright (c) 2013 </para></simplesect>
<simplesect kind="author"><para>Nicolas Knaak</para></simplesect>
Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at <ulink url="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</ulink></para><para>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. </para>    </detaileddescription>
    <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" line="27" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/desmoj/extensions/experimentation/reflect/ReflectionManager.java" bodystart="27" bodyend="223"/>
    <listofallmembers>
      <member refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1a32374ff9684a8cf750f58057c489e36b" prot="public" virt="non-virtual"><scope>desmoj::extensions::experimentation::reflect::ReflectionManager</scope><name>getConstructor</name></member>
      <member refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1adadb1cdf397f771c0583f37d7cd59af3" prot="public" virt="non-virtual"><scope>desmoj::extensions::experimentation::reflect::ReflectionManager</scope><name>getField</name></member>
      <member refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1a9825de961f598cc2464b475331c654e9" prot="public" virt="non-virtual"><scope>desmoj::extensions::experimentation::reflect::ReflectionManager</scope><name>getMethod</name></member>
      <member refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1abf3cd9fac5e3c84d7ce46c517bb6e953" prot="public" virt="non-virtual"><scope>desmoj::extensions::experimentation::reflect::ReflectionManager</scope><name>getMethod</name></member>
      <member refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1ac38e8f20361f2e2030be9083e18993a2" prot="public" virt="non-virtual"><scope>desmoj::extensions::experimentation::reflect::ReflectionManager</scope><name>getValue</name></member>
      <member refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1a191c3caee04e5ae6b6f925df1d872e5c" prot="public" virt="non-virtual"><scope>desmoj::extensions::experimentation::reflect::ReflectionManager</scope><name>invokeConstructor</name></member>
      <member refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1aa31e3edbfc76a6669dfc58c314a50061" prot="public" virt="non-virtual"><scope>desmoj::extensions::experimentation::reflect::ReflectionManager</scope><name>invokeMethod</name></member>
      <member refid="classdesmoj_1_1extensions_1_1experimentation_1_1reflect_1_1_reflection_manager_1afd04290d29e88bc7df674a548a87ff96" prot="public" virt="non-virtual"><scope>desmoj::extensions::experimentation::reflect::ReflectionManager</scope><name>setValue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
