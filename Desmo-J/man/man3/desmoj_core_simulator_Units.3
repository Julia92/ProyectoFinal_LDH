.TH "desmoj.core.simulator.Units" 3 "Wed Dec 4 2013" "Version 1.0" "Desmo-J" \" -*- nroff -*-
.ad l
.nh
.SH NAME
desmoj.core.simulator.Units \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherited by desmoj\&.core\&.simulator\&.TimeConverter, and \fBdesmoj\&.extensions\&.dimensions\&.Quantity\fP\&.
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final int \fBMS\fP = 0"
.br
.ti -1c
.RI "static final int \fBS\fP = 1"
.br
.ti -1c
.RI "static final int \fBMIN\fP = 2"
.br
.ti -1c
.RI "static final int \fBH\fP = 3"
.br
.ti -1c
.RI "static final int \fBMM\fP = 4"
.br
.ti -1c
.RI "static final int \fBCM\fP = 5"
.br
.ti -1c
.RI "static final int \fBM\fP = 6"
.br
.ti -1c
.RI "static final int \fBKM\fP = 7"
.br
.ti -1c
.RI "static final int \fBM_S\fP = 8"
.br
.ti -1c
.RI "static final int \fBKM_H\fP = 9"
.br
.ti -1c
.RI "static final String[] \fBunitStrings\fP"
.br
.ti -1c
.RI "static final double[] \fBunitFactors\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDeprecated\fP
.RS 4
Prefer usage of Java standard classes, e\&.g\&. \fCjava\&.util\&.concurrent\&.TimeUnit\fP for time units\&. 
.RE
.PP
.PP
The interface \fBUnits\fP provides constants for representing units for time, length and speed\&. Additionally, textual representations for these units and conversion factors are given\&. 
.PP
Any class implementing this interface gains direct access to all defined constants\&. It is recommended to use this interface in every class that has to represent values with units\&.
.PP
\fBVersion:\fP
.RS 4
DESMO-J, Ver\&. 2\&.4\&.0 copyright (c) 2013 
.RE
.PP
\fBAuthor:\fP
.RS 4
Ruth Meyer
.RE
.PP
Licensed under the Apache License, Version 2\&.0 (the 'License'); you may not use this file except in compliance with the License\&. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
.PP
Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied\&. See the License for the specific language governing permissions and limitations under the License\&. 
.SH "Member Data Documentation"
.PP 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.CM = 5\fC [static]\fP"
The length unit centimetres\&. 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.H = 3\fC [static]\fP"
The time unit hours\&. 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.KM = 7\fC [static]\fP"
The length unit kilometres\&. 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.KM_H = 9\fC [static]\fP"
The speed unit kilometres/hour\&. 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.M = 6\fC [static]\fP"
The length unit metres\&. 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.M_S = 8\fC [static]\fP"
The speed unit metres/second\&. 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.MIN = 2\fC [static]\fP"
The time unit minutes\&. 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.MM = 4\fC [static]\fP"
The length unit millimetres\&. 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.MS = 0\fC [static]\fP"
The time unit milliseconds\&. 
.SS "final int desmoj\&.core\&.simulator\&.Units\&.S = 1\fC [static]\fP"
The time unit seconds\&. 
.SS "final double [] desmoj\&.core\&.simulator\&.Units\&.unitFactors\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= { 1, 1000, 60000, 3600000, 1,
            100, 1000, 1000000, 1, 1000 / 3600\&.0 }
.fi
Conversion factors to convert between units\&. To get the appropriate unit factor use the unit constant as an index\&. For example: \fC\fBUnits\&.unitFactors\fP[\fBUnits\&.MIN\fP]\fP gives 60000\&. 
.PP
To convert a value from an old unit to a new unit multiply the value with the factor for the old unit and divide by the factor for the new unit\&. Example: \fCvalue * unitFactors[oldUnit] / unitFactors[newUnit]\fP 
.PP
Note that these factors of course only make sense when used for units of the same phenomenon, so you should never attempt to convert a time unit into a length unit, for example\&. 
.SS "final String [] desmoj\&.core\&.simulator\&.Units\&.unitStrings\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= { "ms", "s", "min", "h", "mm",
            "cm", "m", "km", "m/s", "km/h" }
.fi
Textual representations for the defined units\&. To get the appropriate unit String use the unit constant as an index\&. For example: \fC\fBUnits\&.unitStrings\fP[\fBUnits\&.MIN\fP]\fP gives 'min'\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Desmo-J from the source code\&.
