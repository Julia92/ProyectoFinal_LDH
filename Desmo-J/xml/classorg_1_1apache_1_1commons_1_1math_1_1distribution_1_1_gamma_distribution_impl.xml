<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl" kind="class" prot="public">
    <compoundname>org::apache::commons::math::distribution::GammaDistributionImpl</compoundname>
    <basecompoundref refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.AbstractContinuousDistribution</basecompoundref>
    <basecompoundref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution" prot="public" virt="non-virtual">org.apache.commons.math.distribution.GammaDistribution</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Serializable</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ae27152caa1f6a75a076ff491655d0de8" prot="private" static="yes" mutable="no">
        <type>final long</type>
        <definition>final long org.apache.commons.math.distribution.GammaDistributionImpl.serialVersionUID</definition>
        <argsstring></argsstring>
        <name>serialVersionUID</name>
        <initializer>= -3239549463135430361L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serializable version identifier </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="33" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1af90598f1205a8385007eecec945f2b76" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.GammaDistributionImpl.alpha</definition>
        <argsstring></argsstring>
        <name>alpha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The shape parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="36" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a12dadd08eaf50eca0ed0f48c1faafefc" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.GammaDistributionImpl.beta</definition>
        <argsstring></argsstring>
        <name>beta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The scale parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="39" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a0dcd9d603427feff25b65be6e006b16d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>org.apache.commons.math.distribution.GammaDistributionImpl.GammaDistributionImpl</definition>
        <argsstring>(double alpha, double beta)</argsstring>
        <name>GammaDistributionImpl</name>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new gamma distribution with the given alpha and beta values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the shape parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>the scale parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="46" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="46" bodyend="50"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ab056bc092f0c2d91f3df4557cdccbf75" compoundref="_gamma_distribution_impl_8java" startline="110" endline="115">org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a262770d1803bb24dbf800a09b48f954e" compoundref="_gamma_distribution_impl_8java" startline="130" endline="135">org.apache.commons.math.distribution.GammaDistributionImpl.setBeta</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ace75e0656127b9e2461ae173c8a7b00c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.GammaDistributionImpl.cumulativeProbability</definition>
        <argsstring>(double x)</argsstring>
        <name>cumulativeProbability</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution_1a72faeb4e48d8607d791fcb3fa9afb0e3">cumulativeProbability</reimplements>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For this disbution, X, this method returns P(X &lt; x).</para><para>The implementation of this method is based on: <itemizedlist>
<listitem>
<para><ulink url="http://mathworld.wolfram.com/Chi-SquaredDistribution.html">Chi-Squared Distribution</ulink>, equation (9). </para></listitem>
<listitem>
<para>Casella, G., &amp; Berger, R. (1990). <emphasis>Statistical Inference</emphasis>. Belmont, CA: Duxbury Press. </para></listitem>
</itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the value at which the CDF is evaluated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CDF for this distribution. </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="69" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="69" bodyend="79"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a04a7b17506b38ac97fc31f2d4a258f4a" compoundref="_gamma_distribution_impl_8java" startline="121" endline="123">org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1aff5385f4afb2bb5a2e3a2b7238304db2" compoundref="_gamma_distribution_impl_8java" startline="141" endline="143">org.apache.commons.math.distribution.GammaDistributionImpl.getBeta</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ad5fcee69d8ba525df1ff15ab1999f74b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.GammaDistributionImpl.inverseCumulativeProbability</definition>
        <argsstring>(final double p)</argsstring>
        <name>inverseCumulativeProbability</name>
        <param>
          <type>final double</type>
          <declname>p</declname>
        </param>
        <exceptions> throws <ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref> </exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For this distribution, X, this method returns the critical point x, such that P(X &lt; x) = <computeroutput>p</computeroutput>. </para><para>Returns 0 for p=0 and <computeroutput>Double.POSITIVE_INFINITY</computeroutput> for p=1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>x, such that P(X &lt; x) = <computeroutput>p</computeroutput> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classorg_1_1apache_1_1commons_1_1math_1_1_math_exception" kindref="compound">MathException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the inverse cumulative probability can not be computed due to convergence or other numerical errors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>p</computeroutput> is not a valid probability. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="94" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="94" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ab056bc092f0c2d91f3df4557cdccbf75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.commons.math.distribution.GammaDistributionImpl.setAlpha</definition>
        <argsstring>(double alpha)</argsstring>
        <name>setAlpha</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_1aa064285e322f361c32158fe00519e495">setAlpha</reimplements>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the shape parameter, alpha. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>the new shape parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>alpha</computeroutput> is not positive. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="110" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a04a7b17506b38ac97fc31f2d4a258f4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha</definition>
        <argsstring>()</argsstring>
        <name>getAlpha</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_1a825b150e3b264db62ed4a7907a8035b0">getAlpha</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the shape parameter, alpha <simplesect kind="return"><para>alpha. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="121" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a262770d1803bb24dbf800a09b48f954e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void org.apache.commons.math.distribution.GammaDistributionImpl.setBeta</definition>
        <argsstring>(double beta)</argsstring>
        <name>setBeta</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_1a282bffafcbbc3876fa429ea218eb2ed3">setBeta</reimplements>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the scale parameter, beta. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>the new scale parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>IllegalArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>beta</computeroutput> is not positive. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="130" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="130" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1aff5385f4afb2bb5a2e3a2b7238304db2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.GammaDistributionImpl.getBeta</definition>
        <argsstring>()</argsstring>
        <name>getBeta</name>
        <reimplements refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_1af3e8b1ca3866b0da98b6ccc1ac1d0d8e">getBeta</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the scale parameter, beta <simplesect kind="return"><para>beta. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="141" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="141" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ac104cdef724e23a4ebea86a7c2a1c82b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.GammaDistributionImpl.getDomainLowerBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainLowerBound</name>
        <reimplements refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a7c65e91d5a1eb53a5bd309b58e36e966">getDomainLowerBound</reimplements>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value lower bound, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value lower bound, i.e. P(X &lt; <emphasis>lower bound</emphasis>) &lt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="154" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a1f79db04419180c3f4154cb6750d358f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.GammaDistributionImpl.getDomainUpperBound</definition>
        <argsstring>(double p)</argsstring>
        <name>getDomainUpperBound</name>
        <reimplements refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1aeb69c1dd57e233b023edc88155108191">getDomainUpperBound</reimplements>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the domain value upper bound, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>domain value upper bound, i.e. P(X &lt; <emphasis>upper bound</emphasis>) &gt; <computeroutput>p</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="168" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="168" bodyend="184"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a04a7b17506b38ac97fc31f2d4a258f4a" compoundref="_gamma_distribution_impl_8java" startline="121" endline="123">org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1aff5385f4afb2bb5a2e3a2b7238304db2" compoundref="_gamma_distribution_impl_8java" startline="141" endline="143">org.apache.commons.math.distribution.GammaDistributionImpl.getBeta</references>
      </memberdef>
      <memberdef kind="function" id="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a291d340d1b792ffc364d8705a2ee66a2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double org.apache.commons.math.distribution.GammaDistributionImpl.getInitialDomain</definition>
        <argsstring>(double p)</argsstring>
        <name>getInitialDomain</name>
        <reimplements refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1a24d1238e49baef8a236e66c77ce0db3e">getInitialDomain</reimplements>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the initial domain value, based on <computeroutput>p</computeroutput>, used to bracket a CDF root. This method is used by <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" kindref="member">inverseCumulativeProbability(double)</ref> to find critical values.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired probability for the critical value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>initial domain value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="194" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="194" bodyend="209"/>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a04a7b17506b38ac97fc31f2d4a258f4a" compoundref="_gamma_distribution_impl_8java" startline="121" endline="123">org.apache.commons.math.distribution.GammaDistributionImpl.getAlpha</references>
        <references refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1aff5385f4afb2bb5a2e3a2b7238304db2" compoundref="_gamma_distribution_impl_8java" startline="141" endline="143">org.apache.commons.math.distribution.GammaDistributionImpl.getBeta</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The default implementation of <ref refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution" kindref="compound">GammaDistribution</ref>.</para><para><simplesect kind="version"><para></para></simplesect>
<simplesect kind="rcs"><title>Revision:</title><para>617953 </para></simplesect>
<simplesect kind="rcs"><title>Date:</title><para>2008-02-02 22:54:00 -0700 (Sat, 02 Feb 2008) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="8082">
        <label>org.apache.commons.math.distribution.ContinuousDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution"/>
        <childnode refid="8080" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8081">
        <label>Serializable</label>
      </node>
      <node id="8083">
        <label>org.apache.commons.math.distribution.GammaDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution"/>
        <childnode refid="8082" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8078">
        <label>org.apache.commons.math.distribution.AbstractContinuousDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution"/>
        <childnode refid="8079" relation="public-inheritance">
        </childnode>
        <childnode refid="8082" relation="public-inheritance">
        </childnode>
        <childnode refid="8081" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8079">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="8080" relation="public-inheritance">
        </childnode>
        <childnode refid="8081" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8077">
        <label>org.apache.commons.math.distribution.GammaDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl"/>
        <childnode refid="8078" relation="public-inheritance">
        </childnode>
        <childnode refid="8083" relation="public-inheritance">
        </childnode>
        <childnode refid="8081" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8080">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8089">
        <label>org.apache.commons.math.distribution.ContinuousDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution"/>
        <childnode refid="8087" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8088">
        <label>Serializable</label>
      </node>
      <node id="8090">
        <label>org.apache.commons.math.distribution.GammaDistribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution"/>
        <childnode refid="8089" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8085">
        <label>org.apache.commons.math.distribution.AbstractContinuousDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution"/>
        <childnode refid="8086" relation="public-inheritance">
        </childnode>
        <childnode refid="8089" relation="public-inheritance">
        </childnode>
        <childnode refid="8088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8086">
        <label>org.apache.commons.math.distribution.AbstractDistribution</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution"/>
        <childnode refid="8087" relation="public-inheritance">
        </childnode>
        <childnode refid="8088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8084">
        <label>org.apache.commons.math.distribution.GammaDistributionImpl</label>
        <link refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl"/>
        <childnode refid="8085" relation="public-inheritance">
        </childnode>
        <childnode refid="8090" relation="public-inheritance">
        </childnode>
        <childnode refid="8088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8087">
        <label>org.apache.commons.math.distribution.Distribution</label>
        <link refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_distribution"/>
      </node>
    </collaborationgraph>
    <location file="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" line="30" column="1" bodyfile="C:/Users/JulyaMaria/Desktop/Desmo-J/org/apache/commons/math/distribution/GammaDistributionImpl.java" bodystart="29" bodyend="210"/>
    <listofallmembers>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_continuous_distribution_1ad2268d4983e173bb3628fba19d93b2e4" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>AbstractContinuousDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a69b03d7cd00b00c946eea69dfa8da7ba" prot="protected" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>AbstractDistribution</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1af90598f1205a8385007eecec945f2b76" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>alpha</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a12dadd08eaf50eca0ed0f48c1faafefc" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>beta</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ace75e0656127b9e2461ae173c8a7b00c" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_abstract_distribution_1a240f9e95109838d7a1dfb5af57c2ebd2" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::AbstractContinuousDistribution."><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>cumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a0dcd9d603427feff25b65be6e006b16d" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>GammaDistributionImpl</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a04a7b17506b38ac97fc31f2d4a258f4a" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>getAlpha</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1aff5385f4afb2bb5a2e3a2b7238304db2" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>getBeta</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ac104cdef724e23a4ebea86a7c2a1c82b" prot="protected" virt="virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>getDomainLowerBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a1f79db04419180c3f4154cb6750d358f" prot="protected" virt="virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>getDomainUpperBound</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a291d340d1b792ffc364d8705a2ee66a2" prot="protected" virt="virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>getInitialDomain</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ad5fcee69d8ba525df1ff15ab1999f74b" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>inverseCumulativeProbability</name></member>
      <member refid="interfaceorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_continuous_distribution_1a4b500e3d42f02fa1bd606196f404b61f" prot="public" virt="non-virtual" ambiguityscope="org::apache::commons::math::distribution::ContinuousDistribution."><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>inverseCumulativeProbability</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ae27152caa1f6a75a076ff491655d0de8" prot="private" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>serialVersionUID</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1ab056bc092f0c2d91f3df4557cdccbf75" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>setAlpha</name></member>
      <member refid="classorg_1_1apache_1_1commons_1_1math_1_1distribution_1_1_gamma_distribution_impl_1a262770d1803bb24dbf800a09b48f954e" prot="public" virt="non-virtual"><scope>org::apache::commons::math::distribution::GammaDistributionImpl</scope><name>setBeta</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
