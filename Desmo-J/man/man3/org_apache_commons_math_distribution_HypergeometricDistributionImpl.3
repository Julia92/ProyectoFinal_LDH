.TH "org.apache.commons.math.distribution.HypergeometricDistributionImpl" 3 "Wed Dec 4 2013" "Version 1.0" "Desmo-J" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.apache.commons.math.distribution.HypergeometricDistributionImpl \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBorg\&.apache\&.commons\&.math\&.distribution\&.AbstractIntegerDistribution\fP, \fBorg\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistribution\fP, and Serializable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHypergeometricDistributionImpl\fP (int populationSize, int numberOfSuccesses, int sampleSize)"
.br
.ti -1c
.RI "double \fBcumulativeProbability\fP (int x)"
.br
.ti -1c
.RI "int \fBgetNumberOfSuccesses\fP ()"
.br
.ti -1c
.RI "int \fBgetPopulationSize\fP ()"
.br
.ti -1c
.RI "int \fBgetSampleSize\fP ()"
.br
.ti -1c
.RI "double \fBprobability\fP (int x)"
.br
.ti -1c
.RI "void \fBsetNumberOfSuccesses\fP (int num)"
.br
.ti -1c
.RI "void \fBsetPopulationSize\fP (int size)"
.br
.ti -1c
.RI "void \fBsetSampleSize\fP (int size)"
.br
.ti -1c
.RI "double \fBupperCumulativeProbability\fP (int x)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "int \fBgetDomainLowerBound\fP (double p)"
.br
.ti -1c
.RI "int \fBgetDomainUpperBound\fP (double p)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The default implementation of \fBHypergeometricDistribution\fP\&.
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision:\fP
.RS 4
480440 
.RE
.PP
\fBDate:\fP
.RS 4
2006-11-29 00:14:12 -0700 (Wed, 29 Nov 2006) 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.HypergeometricDistributionImpl (intpopulationSize, intnumberOfSuccesses, intsampleSize)"
Construct a new hypergeometric distribution with the given the population size, the number of successes in the population, and the sample size\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpopulationSize\fP the population size\&. 
.br
\fInumberOfSuccesses\fP number of successes in the population\&. 
.br
\fIsampleSize\fP the sample size\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.cumulativeProbability (intx)\fC [virtual]\fP"
For this disbution, X, this method returns P(X  x)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the value at which the PDF is evaluated\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
PDF for this distribution\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.AbstractIntegerDistribution\fP\&.
.SS "int org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.getDomainLowerBound (doublep)\fC [protected]\fP, \fC [virtual]\fP"
Access the domain value lower bound, based on \fCp\fP, used to bracket a PDF root\&.
.PP
\fBParameters:\fP
.RS 4
\fIp\fP the desired probability for the critical value 
.RE
.PP
\fBReturns:\fP
.RS 4
domain value lower bound, i\&.e\&. P(X < \fIlower bound\fP) < \fCp\fP 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.AbstractIntegerDistribution\fP\&.
.SS "int org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.getDomainUpperBound (doublep)\fC [protected]\fP, \fC [virtual]\fP"
Access the domain value upper bound, based on \fCp\fP, used to bracket a PDF root\&.
.PP
\fBParameters:\fP
.RS 4
\fIp\fP the desired probability for the critical value 
.RE
.PP
\fBReturns:\fP
.RS 4
domain value upper bound, i\&.e\&. P(X < \fIupper bound\fP) > \fCp\fP 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.AbstractIntegerDistribution\fP\&.
.SS "int org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.getNumberOfSuccesses ()\fC [virtual]\fP"
Access the number of successes\&. 
.PP
\fBReturns:\fP
.RS 4
the number of successes\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistribution\fP\&.
.SS "int org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.getPopulationSize ()\fC [virtual]\fP"
Access the population size\&. 
.PP
\fBReturns:\fP
.RS 4
the population size\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistribution\fP\&.
.SS "int org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.getSampleSize ()\fC [virtual]\fP"
Access the sample size\&. 
.PP
\fBReturns:\fP
.RS 4
the sample size\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistribution\fP\&.
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.probability (intx)"
For this disbution, X, this method returns P(X = x)\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the value at which the PMF is evaluated\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
PMF for this distribution\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.IntegerDistribution\fP\&.
.SS "void org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.setNumberOfSuccesses (intnum)\fC [virtual]\fP"
Modify the number of successes\&. 
.PP
\fBParameters:\fP
.RS 4
\fInum\fP the new number of successes\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIllegalArgumentException\fP if \fCnum\fP is negative\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistribution\fP\&.
.SS "void org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.setPopulationSize (intsize)\fC [virtual]\fP"
Modify the population size\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP the new population size\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIllegalArgumentException\fP if \fCsize\fP is not positive\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistribution\fP\&.
.SS "void org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.setSampleSize (intsize)\fC [virtual]\fP"
Modify the sample size\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP the new sample size\&. 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIllegalArgumentException\fP if \fCsize\fP is negative\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistribution\fP\&.
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.HypergeometricDistributionImpl\&.upperCumulativeProbability (intx)"
For this disbution, X, this method returns P(X  x)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the value at which the CDF is evaluated\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
upper tail CDF for this distribution\&. 
.RE
.PP
\fBSince:\fP
.RS 4
1\&.1 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Desmo-J from the source code\&.
