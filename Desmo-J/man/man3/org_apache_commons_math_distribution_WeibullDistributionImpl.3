.TH "org.apache.commons.math.distribution.WeibullDistributionImpl" 3 "Wed Dec 4 2013" "Version 1.0" "Desmo-J" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.apache.commons.math.distribution.WeibullDistributionImpl \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBorg\&.apache\&.commons\&.math\&.distribution\&.AbstractContinuousDistribution\fP, \fBorg\&.apache\&.commons\&.math\&.distribution\&.WeibullDistribution\fP, and Serializable\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWeibullDistributionImpl\fP (double alpha, double beta)"
.br
.ti -1c
.RI "double \fBcumulativeProbability\fP (double x)"
.br
.ti -1c
.RI "double \fBgetShape\fP ()"
.br
.ti -1c
.RI "double \fBgetScale\fP ()"
.br
.ti -1c
.RI "double \fBinverseCumulativeProbability\fP (double p)"
.br
.ti -1c
.RI "void \fBsetShape\fP (double alpha)"
.br
.ti -1c
.RI "void \fBsetScale\fP (double beta)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "double \fBgetDomainLowerBound\fP (double p)"
.br
.ti -1c
.RI "double \fBgetDomainUpperBound\fP (double p)"
.br
.ti -1c
.RI "double \fBgetInitialDomain\fP (double p)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Default implementation of \fBorg\&.apache\&.commons\&.math\&.distribution\&.WeibullDistribution\fP\&.
.PP
\fBSince:\fP
.RS 4
1\&.1 
.RE
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision:\fP
.RS 4
617953 
.RE
.PP
\fBDate:\fP
.RS 4
2008-02-02 22:54:00 -0700 (Sat, 02 Feb 2008) 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.WeibullDistributionImpl (doublealpha, doublebeta)"
Creates weibull distribution with the given shape and scale and a location equal to zero\&. 
.PP
\fBParameters:\fP
.RS 4
\fIalpha\fP the shape parameter\&. 
.br
\fIbeta\fP the scale parameter\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.cumulativeProbability (doublex)"
For this disbution, X, this method returns P(X < \fCx\fP)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the value at which the CDF is evaluated\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
CDF evaluted at \fCx\fP\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.Distribution\fP\&.
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.getDomainLowerBound (doublep)\fC [protected]\fP, \fC [virtual]\fP"
Access the domain value lower bound, based on \fCp\fP, used to bracket a CDF root\&. This method is used by \fBinverseCumulativeProbability(double)\fP to find critical values\&.
.PP
\fBParameters:\fP
.RS 4
\fIp\fP the desired probability for the critical value 
.RE
.PP
\fBReturns:\fP
.RS 4
domain value lower bound, i\&.e\&. P(X < \fIlower bound\fP) < \fCp\fP 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.AbstractContinuousDistribution\fP\&.
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.getDomainUpperBound (doublep)\fC [protected]\fP, \fC [virtual]\fP"
Access the domain value upper bound, based on \fCp\fP, used to bracket a CDF root\&. This method is used by \fBinverseCumulativeProbability(double)\fP to find critical values\&.
.PP
\fBParameters:\fP
.RS 4
\fIp\fP the desired probability for the critical value 
.RE
.PP
\fBReturns:\fP
.RS 4
domain value upper bound, i\&.e\&. P(X < \fIupper bound\fP) > \fCp\fP 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.AbstractContinuousDistribution\fP\&.
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.getInitialDomain (doublep)\fC [protected]\fP, \fC [virtual]\fP"
Access the initial domain value, based on \fCp\fP, used to bracket a CDF root\&. This method is used by \fBinverseCumulativeProbability(double)\fP to find critical values\&.
.PP
\fBParameters:\fP
.RS 4
\fIp\fP the desired probability for the critical value 
.RE
.PP
\fBReturns:\fP
.RS 4
initial domain value 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.AbstractContinuousDistribution\fP\&.
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.getScale ()"
Access the scale parameter\&. 
.PP
\fBReturns:\fP
.RS 4
the scale parameter\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.WeibullDistribution\fP\&.
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.getShape ()"
Access the shape parameter\&. 
.PP
\fBReturns:\fP
.RS 4
the shape parameter\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.WeibullDistribution\fP\&.
.SS "double org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.inverseCumulativeProbability (doublep)"
For this distribution, X, this method returns the critical point x, such that P(X < x) = \fCp\fP\&. 
.PP
Returns \fCDouble\&.NEGATIVE_INFINITY\fP for p=0 and \fCDouble\&.POSITIVE_INFINITY\fP for p=1\&.
.PP
\fBParameters:\fP
.RS 4
\fIp\fP the desired probability 
.RE
.PP
\fBReturns:\fP
.RS 4
x, such that P(X < x) = \fCp\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIllegalArgumentException\fP if \fCp\fP is not a valid probability\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.ContinuousDistribution\fP\&.
.SS "void org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.setScale (doublebeta)"
Modify the scale parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbeta\fP the new scale parameter value\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.WeibullDistribution\fP\&.
.SS "void org\&.apache\&.commons\&.math\&.distribution\&.WeibullDistributionImpl\&.setShape (doublealpha)"
Modify the shape parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIalpha\fP the new shape parameter value\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.WeibullDistribution\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Desmo-J from the source code\&.
