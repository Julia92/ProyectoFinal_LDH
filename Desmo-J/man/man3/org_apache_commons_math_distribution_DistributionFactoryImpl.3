.TH "org.apache.commons.math.distribution.DistributionFactoryImpl" 3 "Wed Dec 4 2013" "Version 1.0" "Desmo-J" \" -*- nroff -*-
.ad l
.nh
.SH NAME
org.apache.commons.math.distribution.DistributionFactoryImpl \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDistributionFactoryImpl\fP ()"
.br
.ti -1c
.RI "\fBChiSquaredDistribution\fP \fBcreateChiSquareDistribution\fP (final double degreesOfFreedom)"
.br
.ti -1c
.RI "\fBGammaDistribution\fP \fBcreateGammaDistribution\fP (double alpha, double beta)"
.br
.ti -1c
.RI "\fBTDistribution\fP \fBcreateTDistribution\fP (double degreesOfFreedom)"
.br
.ti -1c
.RI "\fBFDistribution\fP \fBcreateFDistribution\fP (double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom)"
.br
.ti -1c
.RI "\fBExponentialDistribution\fP \fBcreateExponentialDistribution\fP (double mean)"
.br
.ti -1c
.RI "\fBBinomialDistribution\fP \fBcreateBinomialDistribution\fP (int numberOfTrials, double probabilityOfSuccess)"
.br
.ti -1c
.RI "\fBHypergeometricDistribution\fP \fBcreateHypergeometricDistribution\fP (int populationSize, int numberOfSuccesses, int sampleSize)"
.br
.ti -1c
.RI "\fBNormalDistribution\fP \fBcreateNormalDistribution\fP (double mean, double sd)"
.br
.ti -1c
.RI "\fBNormalDistribution\fP \fBcreateNormalDistribution\fP ()"
.br
.ti -1c
.RI "\fBPoissonDistribution\fP \fBcreatePoissonDistribution\fP (double lambda)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A concrete distribution factory\&. This is the default factory used by Commons-Math\&.
.PP
\fBVersion:\fP
.RS 4
.RE
.PP
\fBRevision:\fP
.RS 4
545192 
.RE
.PP
\fBDate:\fP
.RS 4
2007-06-07 07:35:04 -0700 (Thu, 07 Jun 2007) 
.RE
.PP
\fBDeprecated\fP
.RS 4
pluggability of distribution instances is now provided through constructors and setters\&. 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.DistributionFactoryImpl ()"
Default constructor\&. Package scope to prevent unwanted instantiation\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBBinomialDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createBinomialDistribution (intnumberOfTrials, doubleprobabilityOfSuccess)\fC [virtual]\fP"
Create a binomial distribution with the given number of trials and probability of success\&.
.PP
\fBParameters:\fP
.RS 4
\fInumberOfTrials\fP the number of trials 
.br
\fIprobabilityOfSuccess\fP the probability of success 
.RE
.PP
\fBReturns:\fP
.RS 4
a new binomial distribution 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.
.SS "\fBChiSquaredDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createChiSquareDistribution (final doubledegreesOfFreedom)"
Create a new chi-square distribution with the given degrees of freedom\&.
.PP
\fBParameters:\fP
.RS 4
\fIdegreesOfFreedom\fP degrees of freedom 
.RE
.PP
\fBReturns:\fP
.RS 4
a new chi-square distribution 
.RE
.PP

.SS "\fBExponentialDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createExponentialDistribution (doublemean)\fC [virtual]\fP"
Create a new exponential distribution with the given degrees of freedom\&.
.PP
\fBParameters:\fP
.RS 4
\fImean\fP mean 
.RE
.PP
\fBReturns:\fP
.RS 4
a new exponential distribution 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.
.SS "\fBFDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createFDistribution (doublenumeratorDegreesOfFreedom, doubledenominatorDegreesOfFreedom)\fC [virtual]\fP"
Create a new F-distribution with the given degrees of freedom\&.
.PP
\fBParameters:\fP
.RS 4
\fInumeratorDegreesOfFreedom\fP numerator degrees of freedom 
.br
\fIdenominatorDegreesOfFreedom\fP denominator degrees of freedom 
.RE
.PP
\fBReturns:\fP
.RS 4
a new F-distribution 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.
.SS "\fBGammaDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createGammaDistribution (doublealpha, doublebeta)\fC [virtual]\fP"
Create a new gamma distribution the given shape and scale parameters\&.
.PP
\fBParameters:\fP
.RS 4
\fIalpha\fP the shape parameter 
.br
\fIbeta\fP the scale parameter 
.RE
.PP
\fBReturns:\fP
.RS 4
a new gamma distribution 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.
.SS "\fBHypergeometricDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createHypergeometricDistribution (intpopulationSize, intnumberOfSuccesses, intsampleSize)\fC [virtual]\fP"
Create a new hypergeometric distribution with the given the population size, the number of successes in the population, and the sample size\&.
.PP
\fBParameters:\fP
.RS 4
\fIpopulationSize\fP the population size 
.br
\fInumberOfSuccesses\fP number of successes in the population 
.br
\fIsampleSize\fP the sample size 
.RE
.PP
\fBReturns:\fP
.RS 4
a new hypergeometric desitribution 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.
.SS "\fBNormalDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createNormalDistribution (doublemean, doublesd)\fC [virtual]\fP"
Create a new normal distribution with the given mean and standard deviation\&.
.PP
\fBParameters:\fP
.RS 4
\fImean\fP the mean of the distribution 
.br
\fIsd\fP standard deviation 
.RE
.PP
\fBReturns:\fP
.RS 4
a new normal distribution 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.
.SS "\fBNormalDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createNormalDistribution ()\fC [virtual]\fP"
Create a new normal distribution with the mean zero and standard deviation one\&.
.PP
\fBReturns:\fP
.RS 4
a new normal distribution 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.
.SS "\fBPoissonDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createPoissonDistribution (doublelambda)\fC [virtual]\fP"
Create a new Poisson distribution with poisson parameter lambda\&. 
.PP
lambda must be postive; otherwise an \fCIllegalArgumentException\fP is thrown\&.
.PP
\fBParameters:\fP
.RS 4
\fIlambda\fP poisson parameter 
.RE
.PP
\fBReturns:\fP
.RS 4
a new Poisson distribution 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIIllegalArgumentException\fP if lambda  0 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.
.SS "\fBTDistribution\fP org\&.apache\&.commons\&.math\&.distribution\&.DistributionFactoryImpl\&.createTDistribution (doubledegreesOfFreedom)\fC [virtual]\fP"
Create a new t distribution with the given degrees of freedom\&.
.PP
\fBParameters:\fP
.RS 4
\fIdegreesOfFreedom\fP degrees of freedom 
.RE
.PP
\fBReturns:\fP
.RS 4
a new t distribution\&. 
.RE
.PP

.PP
Implements \fBorg\&.apache\&.commons\&.math\&.distribution\&.DistributionFactory\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Desmo-J from the source code\&.
